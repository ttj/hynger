Daikon version 5.2.8, released July 1, 2015; http://plse.cs.washington.edu/daikon.
Reading declaration files                                                                                [12:46:35 PM]:                                                                                                                                                Processing trace data; reading 1 dtrace file:
[12:46:36 PM]: Reading ..\daikon-output\output_buck_hvoltage_discrete.dtrace (l[12:46:37 PM]: Reading ..\daikon-output\output_buck_hvoltage_discrete.dtrace (l[12:46:38 PM]: Finished reading ..\daikon-output\output_buck_hvoltage_discrete.
                                                                                                                                                              ===========================================================================
..Controller:::ENTER
::time == ::time
::control == ::control
::sum == ::sum
::v_sample == ::v_sample
::Vref == ::Vref
::samples_length == ::samples_length
::samples_length == size(::samples[])
::mode_in == ::mode_in
::Vtol == ::Vtol
size(::samples[]) == size(::samples[])
size(::samples[])-1 == size(::samples[])-1
::samples[] == ::samples[]
::samples[] == ::samples[]
::samples[] == ::samples[::samples_length-1]
::samples[] == ::samples[]
::samples[] == ::samples[]
min(::samples[]) == min(::samples[])
max(::samples[]) == max(::samples[])
sum(::samples[]) == sum(::samples[])
::time != 0
::time <= 0.0083333
::time >= 0
::time >= 1.6667E-5
::control one of { 1.0, 2.0, 3.0 }
::control != 0
::control <= 3.0
::control >= 0
::control >= 1.0
::sum <= 784
::sum >= 0
::sum >= 0
::v_sample <= 49.0
::v_sample >= 0
::v_sample >= 0.0
::Vref == 48.0
::Vref != 0
::Vref <= 48.0
::Vref >= 0
::Vref >= 48.0
0 <= ::samples[] <= 63 (elementwise)
::samples[] >= 0 (elementwise)
::samples[] elements <= 49
::samples[] elements >= 0
::samples_length == 16
0 <= ::samples_length <= 63
::samples_length != 0
::samples_length <= 16
::samples_length == 0  (mod 0)
::samples_length >= 0
::samples_length >= 16
::samples_length is a power of 2
::mode_in one of { 1.0, 2.0, 3.0 }
::mode_in != 0
::mode_in <= 3.0
::mode_in >= 0
::mode_in >= 1.0
::Vtol == 0.24
::Vtol != 0
::Vtol <= 0.24
::Vtol >= 0
::Vtol >= 0.24
size(::samples[]) == 16
0 <= size(::samples[]) <= 63
size(::samples[]) != 0
size(::samples[]) <= 16
size(::samples[]) == 0  (mod 0)
size(::samples[]) >= 0
size(::samples[]) >= 16
size(::samples[]) is a power of 2
size(::samples[])-1 == 15
0 <= size(::samples[])-1 <= 63
size(::samples[])-1 != 0
size(::samples[])-1 <= 15
size(::samples[])-1 == 0  (mod 0)
size(::samples[])-1 >= 0
size(::samples[])-1 >= 15
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= min(::samples[]) <= 63
min(::samples[]) <= 49
min(::samples[]) >= 0
min(::samples[]) >= 0
0 <= max(::samples[]) <= 63
max(::samples[]) <= 49
max(::samples[]) >= 0
max(::samples[]) >= 0
sum(::samples[]) <= 784
sum(::samples[]) >= 0
sum(::samples[]) >= 0
::time - ::time == 0
::time < ::control
::time <= ::v_sample
::time < ::Vref
::time < ::mode_in
::time < ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::control + 0 == 0
::control != ::v_sample
::Vref % ::control == 0
::control < ::Vref
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::Vref + 0 == 0
::control <= ::mode_in
::mode_in % ::control == 0
::control > ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::Vtol + 0 == 0
::sum - ::sum == 0
::sum != ::samples_length
::sum != size(::samples[])
::sum != size(::samples[])-1
::sum >= ::samples[]
::sum >= ::samples[]
::sum >= ::samples[]
::sum >= min(::samples[])
::v_sample - ::v_sample == 0
::v_sample != ::mode_in
::v_sample != ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * ::Vref + 0 == 0
::Vref % ::mode_in == 0
::Vref > ::mode_in
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * ::mode_in + 0 == 0
::Vref % ::Vtol == 0
::Vref > ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * ::Vtol + 0 == 0
::samples[] - ::samples[] == 0
::samples[] == ::samples[] (elementwise)
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] elements >= min(::samples[])
min(::samples[]) in ::samples[]
::samples[] elements <= max(::samples[])
max(::samples[]) in ::samples[]
::samples[] elements <= sum(::samples[])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * ::samples_length + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[]) + 0 == 0
::samples_length > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[])-1 + 0 == 0
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != min(::samples[])
::samples_length != max(::samples[])
::samples_length != sum(::samples[])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_in+ 0 * ::mode_in + 0 == 0
::mode_in > ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_in+ 0 * ::Vtol + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vtol+ 0 * ::Vtol + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[]) + 0 == 0
size(::samples[]) > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != min(::samples[])
size(::samples[]) != max(::samples[])
size(::samples[]) != sum(::samples[])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != min(::samples[])
size(::samples[])-1 != max(::samples[])
size(::samples[])-1 != sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
min(::samples[]) - min(::samples[]) == 0
min(::samples[]) <= max(::samples[])
min(::samples[]) <= sum(::samples[])
max(::samples[]) - max(::samples[]) == 0
max(::samples[]) <= sum(::samples[])
sum(::samples[]) - sum(::samples[]) == 0
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::control, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::control, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::control, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::Vref, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::Vref, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::mode_in, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::Vtol, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_sample, ::v_sample, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_sample, ::v_sample, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vref, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vref, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::mode_in, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::mode_in, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vtol, ::Vtol)
::samples_length == (::samples_length | size(::samples[]))
::samples_length == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[])-1)
::samples_length == (size(::samples[]) | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::mode_in, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::mode_in, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::Vtol, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), sum(::samples[]))
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
min(::samples[]) == (min(::samples[]) | min(::samples[]))
min(::samples[]) == (min(::samples[]) | min(::samples[]))
min(::samples[]) == (min(::samples[]) | min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), min(::samples[]))
max(::samples[]) == (max(::samples[]) | max(::samples[]))
max(::samples[]) == (max(::samples[]) | max(::samples[]))
max(::samples[]) == (max(::samples[]) | max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), max(::samples[]))
===========================================================================
..Controller:::EXIT
::time == ::time
::time == orig(::time)
::control == ::control
::sum == ::sum
::sum == sum(::samples[])
::sum == max(::samples[orig(::sum)..::samples_length-1])
::v_sample == ::v_sample
::Vref == ::Vref
::Vref == orig(::Vref)
::samples[] == orig(::samples[])
::samples[] < concat(::samples[],orig(::samples[])) (lexically)
::samples[] <= concat(::samples[],orig(::samples[])) (lexically)
::samples[] > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[] >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples_length == ::samples_length
::samples_length == orig(::samples_length)
::samples_length == size(::samples[])
::mode_in == ::mode_in
::mode_in == orig(::mode_in)
::Vtol == ::Vtol
::Vtol == orig(::Vtol)
orig(::control) == orig(::control)
orig(::sum) == orig(::sum)
orig(::sum) == min(::samples[orig(::sum)..::samples_length-1])
orig(::v_sample) == orig(::v_sample)
size(::samples[]) == size(::samples[])
size(::samples[]) == orig(size(::samples[]))
size(::samples[])-1 == size(::samples[])-1
size(::samples[])-1 == orig(size(::samples[]))-1
::samples[] == ::samples[]
::samples[] == orig(::samples[])
::samples[] == min(::samples[orig(::sum)..::samples_length-1])
::samples[] == ::samples[]
::samples[] == orig(::samples[])
::samples[] == ::samples[::samples_length-1]
::samples[] == ::samples[orig(::samples_length)-1]
::samples[] == orig(::samples[post(::samples_length)-1])
::samples[] == orig(::samples[::samples_length-1])
::samples[] == min(::samples[orig(::sum)..::samples_length-1])
::samples[] == ::samples[]
::samples[] == orig(::samples[])
::samples[] == max(::samples[orig(::sum)..::samples_length-1])
::samples[] == ::samples[]
::samples[] == orig(::samples[])
::samples[] == min(::samples[orig(::sum)..::samples_length-1])
min(::samples[]) == min(::samples[])
min(::samples[]) == min(orig(::samples[]))
min(::samples[]) == min(intersection(::samples[],orig(::samples[])))
min(::samples[]) == min(concat(::samples[],orig(::samples[])))
min(::samples[]) == min(::samples[orig(::sum)..::samples_length-1])
max(::samples[]) == max(::samples[])
max(::samples[]) == max(orig(::samples[]))
max(::samples[]) == max(intersection(::samples[],orig(::samples[])))
max(::samples[]) == max(concat(::samples[],orig(::samples[])))
max(::samples[]) == max(::samples[orig(::sum)..::samples_length-1])
sum(::samples[]) == sum(::samples[])
sum(::samples[]) == sum(orig(::samples[]))
sum(::samples[]) == max(::samples[orig(::sum)..::samples_length-1])
intersection(::samples[],orig(::samples[])) > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
intersection(::samples[],orig(::samples[])) >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
concat(::samples[],orig(::samples[])) > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
concat(::samples[],orig(::samples[])) >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[::samples_length..orig(::samples_length)-1] <= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[::samples_length..orig(::samples_length)-1]
::samples[::samples_length..orig(::samples_length)-1] >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[orig(::samples_length)..::samples_length-1]
size(intersection(::samples[],orig(::samples[]))) == size(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 == size(intersection(::samples[],orig(::samples[])))-1
sum(intersection(::samples[],orig(::samples[]))) == sum(intersection(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) == max(::samples[orig(::sum)..::samples_length-1])
size(concat(::samples[],orig(::samples[]))) == size(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[])))-1 == size(concat(::samples[],orig(::samples[])))-1
sum(concat(::samples[],orig(::samples[]))) == sum(concat(::samples[],orig(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[orig(::sum)..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[orig(::sum)+1..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) == max(::samples[orig(::sum)+1..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) == sum(::samples[orig(::sum)+1..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[orig(::sum)..orig(::samples_length)-1])
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[orig(::sum)+1..orig(::samples_length)-1])
min(::samples[orig(::sum)..::samples_length-1]) == max(::samples[orig(::sum)+1..orig(::samples_length)-1])
min(::samples[orig(::sum)..::samples_length-1]) == sum(::samples[orig(::sum)+1..orig(::samples_length)-1])
max(::samples[orig(::sum)..::samples_length-1]) == max(::samples[orig(::sum)..::samples_length-1])
max(::samples[orig(::sum)..::samples_length-1]) == sum(::samples[orig(::sum)..::samples_length-1])
max(::samples[orig(::sum)..::samples_length-1]) == max(::samples[orig(::sum)..orig(::samples_length)-1])
max(::samples[orig(::sum)..::samples_length-1]) == sum(::samples[orig(::sum)..orig(::samples_length)-1])
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[orig(::samples_length)..::samples_length-1])
::time != 0
::time <= 0.0083333
::time >= 0
::time >= 1.6667E-5
::control one of { 1.0, 2.0, 3.0 }
::control != 0
::control <= 3.0
::control >= 0
::control >= 1.0
::sum <= 784
::sum >= 0
::sum >= 0
::v_sample <= 49.0
::v_sample >= 0
::v_sample >= 0.0
::Vref == 48.0
::Vref != 0
::Vref <= 48.0
::Vref >= 0
::Vref >= 48.0
0 <= ::samples[] <= 63 (elementwise)
::samples[] >= 0 (elementwise)
::samples[] elements <= 49
::samples[] elements >= 0
::samples_length == 16
0 <= ::samples_length <= 63
::samples_length != 0
::samples_length <= 16
::samples_length == 0  (mod 0)
::samples_length >= 0
::samples_length >= 16
::samples_length is a power of 2
::mode_in one of { 1.0, 2.0, 3.0 }
::mode_in != 0
::mode_in <= 3.0
::mode_in >= 0
::mode_in >= 1.0
::Vtol == 0.24
::Vtol != 0
::Vtol <= 0.24
::Vtol >= 0
::Vtol >= 0.24
orig(::control) one of { 1.0, 2.0, 3.0 }
orig(::control) != 0
orig(::control) <= 3.0
orig(::control) >= 0
orig(::control) >= 1.0
orig(::sum) <= 784
orig(::sum) >= 0
orig(::sum) >= 0
orig(::v_sample) <= 49.0
orig(::v_sample) >= 0
orig(::v_sample) >= 0.0
size(::samples[]) == 16
0 <= size(::samples[]) <= 63
size(::samples[]) != 0
size(::samples[]) <= 16
size(::samples[]) == 0  (mod 0)
size(::samples[]) >= 0
size(::samples[]) >= 16
size(::samples[]) is a power of 2
size(::samples[])-1 == 15
0 <= size(::samples[])-1 <= 63
size(::samples[])-1 != 0
size(::samples[])-1 <= 15
size(::samples[])-1 == 0  (mod 0)
size(::samples[])-1 >= 0
size(::samples[])-1 >= 15
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= min(::samples[]) <= 63
min(::samples[]) <= 49
min(::samples[]) >= 0
min(::samples[]) >= 0
0 <= max(::samples[]) <= 63
max(::samples[]) <= 49
max(::samples[]) >= 0
max(::samples[]) >= 0
sum(::samples[]) <= 784
sum(::samples[]) >= 0
sum(::samples[]) >= 0
0 <= intersection(::samples[],orig(::samples[])) <= 63 (elementwise)
intersection(::samples[],orig(::samples[])) >= 0 (elementwise)
intersection(::samples[],orig(::samples[])) elements <= 49
intersection(::samples[],orig(::samples[])) elements >= 0
0 <= concat(::samples[],orig(::samples[])) <= 63 (elementwise)
concat(::samples[],orig(::samples[])) >= 0 (elementwise)
concat(::samples[],orig(::samples[])) elements <= 49
concat(::samples[],orig(::samples[])) elements >= 0
::samples[::samples_length..orig(::samples_length)-1] == []
::samples[::samples_length..orig(::samples_length)-1] elements one of {  }
0 <= ::samples[::samples_length..orig(::samples_length)-1] <= 63 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == -1 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == 1 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] >= 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] >= 64 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] elements <= -9223372036854775808
::samples[::samples_length..orig(::samples_length)-1] elements >= 9223372036854775807
::samples[::samples_length..orig(::samples_length)-1] elements are equal
::samples[::samples_length..orig(::samples_length)-1] is a power of 2 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] is boolean (elementwise)
::samples[::samples_length..orig(::samples_length)-1] sorted by <
::samples[::samples_length..orig(::samples_length)-1] sorted by <=
::samples[::samples_length..orig(::samples_length)-1] sorted by >
::samples[::samples_length..orig(::samples_length)-1] sorted by >=
size(intersection(::samples[],orig(::samples[]))) one of { 1, 2, 3 }
0 <= size(intersection(::samples[],orig(::samples[]))) <= 63
size(intersection(::samples[],orig(::samples[]))) != 0
size(intersection(::samples[],orig(::samples[]))) <= 3
size(intersection(::samples[],orig(::samples[]))) >= 0
size(intersection(::samples[],orig(::samples[]))) >= 1
size(intersection(::samples[],orig(::samples[])))-1 one of { 0, 1, 2 }
0 <= size(intersection(::samples[],orig(::samples[])))-1 <= 63
size(intersection(::samples[],orig(::samples[])))-1 <= 2
size(intersection(::samples[],orig(::samples[])))-1 >= 0
size(intersection(::samples[],orig(::samples[])))-1 >= 0
sum(intersection(::samples[],orig(::samples[]))) <= 144
sum(intersection(::samples[],orig(::samples[]))) >= 0
sum(intersection(::samples[],orig(::samples[]))) >= 0
size(concat(::samples[],orig(::samples[]))) == 32
0 <= size(concat(::samples[],orig(::samples[]))) <= 63
size(concat(::samples[],orig(::samples[]))) != 0
size(concat(::samples[],orig(::samples[]))) <= 32
size(concat(::samples[],orig(::samples[]))) == 0  (mod 0)
size(concat(::samples[],orig(::samples[]))) >= 0
size(concat(::samples[],orig(::samples[]))) >= 32
size(concat(::samples[],orig(::samples[]))) is a power of 2
size(concat(::samples[],orig(::samples[])))-1 == 31
0 <= size(concat(::samples[],orig(::samples[])))-1 <= 63
size(concat(::samples[],orig(::samples[])))-1 != 0
size(concat(::samples[],orig(::samples[])))-1 <= 31
size(concat(::samples[],orig(::samples[])))-1 == 0  (mod 0)
size(concat(::samples[],orig(::samples[])))-1 >= 0
size(concat(::samples[],orig(::samples[])))-1 >= 31
sum(concat(::samples[],orig(::samples[]))) <= 1568
sum(concat(::samples[],orig(::samples[]))) == 0  (mod 2)
sum(concat(::samples[],orig(::samples[]))) >= 0
sum(concat(::samples[],orig(::samples[]))) >= 0
min(::samples[orig(::sum)..::samples_length-1]) == 0
0 <= min(::samples[orig(::sum)..::samples_length-1]) <= 63
min(::samples[orig(::sum)..::samples_length-1]) <= 0
min(::samples[orig(::sum)..::samples_length-1]) == 0
min(::samples[orig(::sum)..::samples_length-1]) == 0  (mod 0)
min(::samples[orig(::sum)..::samples_length-1]) >= 0
min(::samples[orig(::sum)..::samples_length-1]) >= 0
min(::samples[orig(::sum)..::samples_length-1]) is boolean
max(::samples[orig(::sum)..::samples_length-1]) one of { 0, 48 }
0 <= max(::samples[orig(::sum)..::samples_length-1]) <= 63
max(::samples[orig(::sum)..::samples_length-1]) <= 48
max(::samples[orig(::sum)..::samples_length-1]) == 0  (mod 48)
max(::samples[orig(::sum)..::samples_length-1]) >= 0
max(::samples[orig(::sum)..::samples_length-1]) >= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == 0
0 <= sum(::samples[::samples_length..orig(::samples_length)-1]) <= 63
sum(::samples[::samples_length..orig(::samples_length)-1]) <= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == 0  (mod 0)
sum(::samples[::samples_length..orig(::samples_length)-1]) >= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) >= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) is boolean
::time - ::time == 0
::time < ::control
::time <= ::v_sample
::time < ::Vref
::time < ::mode_in
::time < ::Vtol
::time < orig(::control)
::time <= orig(::v_sample)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::control + 0 == 0
::control != ::v_sample
::Vref % ::control == 0
::control < ::Vref
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::Vref + 0 == 0
::control <= ::mode_in
::control > ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::Vtol + 0 == 0
::control != orig(::v_sample)
::sum - ::sum == 0
::samples[] elements <= ::sum
::sum != ::samples_length
::sum != size(::samples[])
::sum != size(::samples[])-1
::sum >= ::samples[]
::sum >= ::samples[]
::sum >= ::samples[]
::sum >= ::samples[]
::sum >= min(::samples[])
::sum >= max(::samples[])
::sum - sum(::samples[]) == 0
intersection(::samples[],orig(::samples[])) elements <= ::sum
concat(::samples[],orig(::samples[])) elements <= ::sum
::samples[::samples_length..orig(::samples_length)-1] elements < ::sum
::samples[::samples_length..orig(::samples_length)-1] elements == ::sum
::samples[::samples_length..orig(::samples_length)-1] elements > ::sum
::sum != size(intersection(::samples[],orig(::samples[])))
::sum >= size(intersection(::samples[],orig(::samples[])))-1
::sum >= sum(intersection(::samples[],orig(::samples[])))
::sum != size(concat(::samples[],orig(::samples[])))
::sum != size(concat(::samples[],orig(::samples[])))-1
2 * ::sum - sum(concat(::samples[],orig(::samples[]))) == 0
::sum <= sum(concat(::samples[],orig(::samples[])))
::sum >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::sum+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::sum+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::sum >= sum(::samples[::samples_length..orig(::samples_length)-1])
::v_sample - ::v_sample == 0
::v_sample != ::mode_in
::v_sample != ::Vtol
::v_sample != orig(::control)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * ::Vref + 0 == 0
::Vref % ::mode_in == 0
::Vref > ::mode_in
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * ::mode_in + 0 == 0
::Vref % ::Vtol == 0
::Vref > ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * ::Vtol + 0 == 0
::Vref % orig(::control) == 0
::Vref > orig(::control)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vref+ 0 * orig(::control) + 0 == 0
::samples[] - ::samples[] == 0
::samples[] == ::samples[] (elementwise)
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] elements >= min(::samples[])
min(::samples[]) in ::samples[]
::samples[] elements <= max(::samples[])
max(::samples[]) in ::samples[]
::samples[] elements <= sum(::samples[])
::samples[] is a subsequence of concat(::samples[],orig(::samples[]))
::samples[] elements <= sum(intersection(::samples[],orig(::samples[])))
::samples[] elements <= sum(concat(::samples[],orig(::samples[])))
::samples[] elements >= min(::samples[orig(::sum)..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) in ::samples[]
::samples[] elements <= max(::samples[orig(::sum)..::samples_length-1])
max(::samples[orig(::sum)..::samples_length-1]) in ::samples[]
::samples[] elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * ::samples_length + 0 == 0
::samples_length != orig(::sum)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[]) + 0 == 0
::samples_length > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[])-1 + 0 == 0
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != min(::samples[])
::samples_length != max(::samples[])
::samples_length != sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples_length
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples_length
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples_length
::samples_length > size(intersection(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
::samples_length > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
::samples_length != sum(intersection(::samples[],orig(::samples[])))
::samples_length < size(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) % ::samples_length == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
::samples_length < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
::samples_length != sum(concat(::samples[],orig(::samples[])))
::samples_length > min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples_length != max(::samples[orig(::sum)..::samples_length-1])
max(::samples[orig(::sum)..::samples_length-1]) % ::samples_length == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples_length > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_in+ 0 * ::mode_in + 0 == 0
::mode_in > ::Vtol
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_in+ 0 * ::Vtol + 0 == 0
::mode_in % orig(::control) == 0
::mode_in >= orig(::control)
::mode_in != orig(::v_sample)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vtol+ 0 * ::Vtol + 0 == 0
::Vtol < orig(::control)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::Vtol+ 0 * orig(::control) + 0 == 0
::Vtol != orig(::v_sample)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * orig(::control)+ 0 * orig(::control) + 0 == 0
orig(::control) != orig(::v_sample)
orig(::sum) - orig(::sum) == 0
orig(::sum) != size(::samples[])
orig(::sum) != size(::samples[])-1
orig(::sum) >= ::samples[]
orig(::sum) >= ::samples[]
orig(::sum) >= ::samples[]
orig(::sum) >= min(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements < orig(::sum)
::samples[::samples_length..orig(::samples_length)-1] elements == orig(::sum)
::samples[::samples_length..orig(::samples_length)-1] elements > orig(::sum)
orig(::sum) != size(intersection(::samples[],orig(::samples[])))
orig(::sum) != size(concat(::samples[],orig(::samples[])))
orig(::sum) != size(concat(::samples[],orig(::samples[])))-1
orig(::sum) <= sum(concat(::samples[],orig(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == orig(::sum)**2
orig(::sum) == min(::samples[orig(::sum)..::samples_length-1])**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * orig(::sum)+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
orig(::sum) <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * orig(::sum)+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
orig(::sum) >= sum(::samples[::samples_length..orig(::samples_length)-1])
orig(::v_sample) - orig(::v_sample) == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[]) + 0 == 0
size(::samples[]) > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != min(::samples[])
size(::samples[]) != max(::samples[])
size(::samples[]) != sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements < size(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == size(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > size(::samples[])
size(::samples[]) > size(intersection(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[]) > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[]) != sum(intersection(::samples[],orig(::samples[])))
size(::samples[]) < size(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) % size(::samples[]) == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[]) < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[]) != sum(concat(::samples[],orig(::samples[])))
size(::samples[]) > min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
max(::samples[orig(::sum)..::samples_length-1]) % size(::samples[]) == 0
size(::samples[]) != max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(::samples[]) > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != min(::samples[])
size(::samples[])-1 != max(::samples[])
size(::samples[])-1 != sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements < size(::samples[])-1
::samples[::samples_length..orig(::samples_length)-1] elements == size(::samples[])-1
::samples[::samples_length..orig(::samples_length)-1] elements > size(::samples[])-1
size(::samples[])-1 > size(intersection(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[])-1 > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[])-1 != sum(intersection(::samples[],orig(::samples[])))
size(::samples[])-1 < size(concat(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[])-1 < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[])-1 != sum(concat(::samples[],orig(::samples[])))
size(::samples[])-1 > min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(::samples[])-1 != max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(::samples[])-1 > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] in intersection(::samples[],orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] <= sum(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] == min(::samples[orig(::sum)..::samples_length-1])**2
min(::samples[orig(::sum)..::samples_length-1]) == ::samples[]**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] in intersection(::samples[],orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] <= sum(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] == min(::samples[orig(::sum)..::samples_length-1])**2
min(::samples[orig(::sum)..::samples_length-1]) == ::samples[]**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] in intersection(::samples[],orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] >= size(intersection(::samples[],orig(::samples[])))-1
::samples[] <= sum(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] in intersection(::samples[],orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] <= sum(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] == min(::samples[orig(::sum)..::samples_length-1])**2
min(::samples[orig(::sum)..::samples_length-1]) == ::samples[]**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples[]+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
min(::samples[]) - min(::samples[]) == 0
min(::samples[]) <= max(::samples[])
min(::samples[]) <= sum(::samples[])
intersection(::samples[],orig(::samples[])) elements >= min(::samples[])
min(::samples[]) in intersection(::samples[],orig(::samples[]))
concat(::samples[],orig(::samples[])) elements >= min(::samples[])
min(::samples[]) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < min(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == min(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > min(::samples[])
min(::samples[]) != size(intersection(::samples[],orig(::samples[])))
min(::samples[]) <= sum(intersection(::samples[],orig(::samples[])))
min(::samples[]) != size(concat(::samples[],orig(::samples[])))
min(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
min(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
min(::samples[]) == min(::samples[orig(::sum)..::samples_length-1])**2
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[])**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * min(::samples[])+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
min(::samples[]) <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * min(::samples[])+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
min(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
max(::samples[]) - max(::samples[]) == 0
max(::samples[]) <= sum(::samples[])
intersection(::samples[],orig(::samples[])) elements <= max(::samples[])
max(::samples[]) in intersection(::samples[],orig(::samples[]))
concat(::samples[],orig(::samples[])) elements <= max(::samples[])
max(::samples[]) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < max(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == max(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > max(::samples[])
max(::samples[]) != size(intersection(::samples[],orig(::samples[])))
max(::samples[]) >= size(intersection(::samples[],orig(::samples[])))-1
max(::samples[]) <= sum(intersection(::samples[],orig(::samples[])))
max(::samples[]) != size(concat(::samples[],orig(::samples[])))
max(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
max(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
max(::samples[]) >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * max(::samples[])+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * max(::samples[])+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
max(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
sum(::samples[]) - sum(::samples[]) == 0
intersection(::samples[],orig(::samples[])) elements <= sum(::samples[])
concat(::samples[],orig(::samples[])) elements <= sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements < sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > sum(::samples[])
sum(::samples[]) != size(intersection(::samples[],orig(::samples[])))
sum(::samples[]) >= size(intersection(::samples[],orig(::samples[])))-1
sum(::samples[]) >= sum(intersection(::samples[],orig(::samples[])))
sum(::samples[]) != size(concat(::samples[],orig(::samples[])))
sum(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
2 * sum(::samples[]) - sum(concat(::samples[],orig(::samples[]))) == 0
sum(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
sum(::samples[]) >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(::samples[])+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(::samples[])+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
sum(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
intersection(::samples[],orig(::samples[])) - intersection(::samples[],orig(::samples[])) == 0
intersection(::samples[],orig(::samples[])) == intersection(::samples[],orig(::samples[])) (elementwise)
intersection(::samples[],orig(::samples[])) elements <= sum(intersection(::samples[],orig(::samples[])))
intersection(::samples[],orig(::samples[])) elements <= sum(concat(::samples[],orig(::samples[])))
intersection(::samples[],orig(::samples[])) elements >= min(::samples[orig(::sum)..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) in intersection(::samples[],orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements <= max(::samples[orig(::sum)..::samples_length-1])
max(::samples[orig(::sum)..::samples_length-1]) in intersection(::samples[],orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
concat(::samples[],orig(::samples[])) - concat(::samples[],orig(::samples[])) == 0
concat(::samples[],orig(::samples[])) == concat(::samples[],orig(::samples[])) (elementwise)
concat(::samples[],orig(::samples[])) elements <= sum(intersection(::samples[],orig(::samples[])))
concat(::samples[],orig(::samples[])) elements <= sum(concat(::samples[],orig(::samples[])))
concat(::samples[],orig(::samples[])) elements >= min(::samples[orig(::sum)..::samples_length-1])
min(::samples[orig(::sum)..::samples_length-1]) in concat(::samples[],orig(::samples[]))
concat(::samples[],orig(::samples[])) elements <= max(::samples[orig(::sum)..::samples_length-1])
max(::samples[orig(::sum)..::samples_length-1]) in concat(::samples[],orig(::samples[]))
concat(::samples[],orig(::samples[])) elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] % ::samples[::samples_length..orig(::samples_length)-1] == 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] % ::samples[::samples_length..orig(::samples_length)-1] == 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[::samples_length..orig(::samples_length)-1]**2 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[::samples_length..orig(::samples_length)-1]**2 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] is the reverse of ::samples[::samples_length..orig(::samples_length)-1]
warning: too few samples for daikon.inv.binary.twoSequence.PairwiseLinearBinary invariant: (::samples[::samples_length..orig(::samples_length)-1], ::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] elements < size(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == size(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > size(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < size(intersection(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements == size(intersection(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements > size(intersection(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements < sum(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == sum(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > sum(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < size(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == size(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > size(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < size(concat(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements == size(concat(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements > size(concat(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements < sum(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == sum(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > sum(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < min(::samples[orig(::sum)..::samples_length-1])
::samples[::samples_length..orig(::samples_length)-1] elements == min(::samples[orig(::sum)..::samples_length-1])
::samples[::samples_length..orig(::samples_length)-1] elements > min(::samples[orig(::sum)..::samples_length-1])
::samples[::samples_length..orig(::samples_length)-1] elements < max(::samples[orig(::sum)..::samples_length-1])
::samples[::samples_length..orig(::samples_length)-1] elements == max(::samples[orig(::sum)..::samples_length-1])
::samples[::samples_length..orig(::samples_length)-1] elements > max(::samples[orig(::sum)..::samples_length-1])
::samples[::samples_length..orig(::samples_length)-1] elements < sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] elements == sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] elements > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
size(intersection(::samples[],orig(::samples[]))) > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[]))) != sum(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) < size(concat(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(intersection(::samples[],orig(::samples[]))) < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[]))) != sum(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) > min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
max(::samples[orig(::sum)..::samples_length-1]) % size(intersection(::samples[],orig(::samples[]))) == 0
size(intersection(::samples[],orig(::samples[]))) != max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(intersection(::samples[],orig(::samples[]))) > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 <= sum(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 < size(concat(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 <= sum(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
sum(intersection(::samples[],orig(::samples[]))) - sum(intersection(::samples[],orig(::samples[]))) == 0
sum(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))-1
sum(intersection(::samples[],orig(::samples[]))) <= sum(concat(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(intersection(::samples[],orig(::samples[])))+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(intersection(::samples[],orig(::samples[])))+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
sum(intersection(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(concat(::samples[],orig(::samples[]))) > size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(concat(::samples[],orig(::samples[]))) != sum(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) > min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(concat(::samples[],orig(::samples[]))) != max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(concat(::samples[],orig(::samples[]))) > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))-1+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(concat(::samples[],orig(::samples[])))-1 != sum(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[])))-1 > min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))-1+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(concat(::samples[],orig(::samples[])))-1 != max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))-1+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
size(concat(::samples[],orig(::samples[])))-1 > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))-1+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
sum(concat(::samples[],orig(::samples[]))) - sum(concat(::samples[],orig(::samples[]))) == 0
sum(concat(::samples[],orig(::samples[]))) >= min(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(concat(::samples[],orig(::samples[])))+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
sum(concat(::samples[],orig(::samples[]))) >= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(concat(::samples[],orig(::samples[])))+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
sum(concat(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[orig(::sum)..::samples_length-1])**2
min(::samples[orig(::sum)..::samples_length-1]) == min(::samples[orig(::sum)..::samples_length-1])**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * min(::samples[orig(::sum)..::samples_length-1])+ 0 * min(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
min(::samples[orig(::sum)..::samples_length-1]) <= max(::samples[orig(::sum)..::samples_length-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * min(::samples[orig(::sum)..::samples_length-1])+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
min(::samples[orig(::sum)..::samples_length-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])**2
sum(::samples[::samples_length..orig(::samples_length)-1]) == min(::samples[orig(::sum)..::samples_length-1])**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * min(::samples[orig(::sum)..::samples_length-1])+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * max(::samples[orig(::sum)..::samples_length-1])+ 0 * max(::samples[orig(::sum)..::samples_length-1]) + 0 == 0
max(::samples[orig(::sum)..::samples_length-1]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * max(::samples[orig(::sum)..::samples_length-1])+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])**2
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(::samples[::samples_length..orig(::samples_length)-1])+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::control, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::control, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::Vref, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::Vref, ::Vtol)
::mode_in == (java.lang.Math.max(::control, orig(::control)))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::control, ::Vtol, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, size(::samples[])-1)
::sum == (::sum | sum(::samples[]))
::sum == (::sum | sum(::samples[]))
sum(::samples[]) == (::sum | ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, size(concat(::samples[],orig(::samples[])))-1)
::sum == (plume.MathMDE.gcd(::sum, sum(concat(::samples[],orig(::samples[])))))
::sum == (plume.MathMDE.gcd(::sum, sum(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, sum(concat(::samples[],orig(::samples[]))))
::sum == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
::sum == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, min(::samples[orig(::sum)..::samples_length-1]))
::sum == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, max(::samples[orig(::sum)..::samples_length-1]))
::sum == (::sum | sum(::samples[::samples_length..orig(::samples_length)-1]))
::sum == (::sum | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::sum, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples_length, sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples_length, sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::sum, ::samples_length))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples_length, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples_length, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum * orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::sum, orig(::sum)))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> ::sum)
orig(::sum) == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::sum * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, orig(::sum), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
::sum == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
::sum == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::sum, orig(::sum)))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, orig(::sum)))
orig(::sum) == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::sum ^ max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, orig(::sum), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[]), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::sum, size(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[])-1, sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[])-1, sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> size(::samples[])-1)
::samples[] == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::sum * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
::sum == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::sum == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::sum * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
::sum == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::sum == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.max(::sum, min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.gcd(::sum, min(::samples[orig(::sum)..::samples_length-1])))
::sum == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::sum == (java.lang.Math.max(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::sum == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(::sum, max(::samples[orig(::sum)..::samples_length-1])))
::sum == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum & ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> ::samples[])
::samples[] == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::sum * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::sum ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
::sum == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::sum == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::sum == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::sum * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
::sum == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
::sum == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, min(::samples[])))
min(::samples[]) == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::sum ^ max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
::sum == (java.lang.Math.max(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::sum == (max(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (::sum << min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::sum >> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::sum >>> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::sum ^ min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (java.lang.Math.max(::sum, min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (plume.MathMDE.gcd(::sum, min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(max(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (::sum & max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(::sum, max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum & max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, max(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> max(::samples[]))
::sum == (sum(::samples[]) | sum(::samples[]))
sum(::samples[]) == (::sum | sum(::samples[]))
sum(::samples[]) == (::sum | sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
::sum == (plume.MathMDE.gcd(sum(::samples[]), sum(concat(::samples[],orig(::samples[])))))
sum(::samples[]) == (plume.MathMDE.gcd(::sum, sum(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), sum(concat(::samples[],orig(::samples[]))))
::sum == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> ::sum)
sum(::samples[]) == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | sum(::samples[]))
sum(::samples[]) == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[]) == (::sum | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::sum == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum * size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
::sum == (java.lang.Math.max(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
::sum == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
::sum == (sum(intersection(::samples[],orig(::samples[]))) << min(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(intersection(::samples[],orig(::samples[]))) >> min(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(intersection(::samples[],orig(::samples[]))) >>> min(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(intersection(::samples[],orig(::samples[]))) ^ min(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum ^ sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::sum)
sum(intersection(::samples[],orig(::samples[]))) == (::sum << min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::sum >> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::sum >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::sum ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.max(::sum, min(::samples[orig(::sum)..::samples_length-1])))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::sum, min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
::sum == (sum(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
::sum == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum & sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, sum(intersection(::samples[],orig(::samples[])))))
sum(intersection(::samples[],orig(::samples[]))) == (::sum & max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::sum, max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::sum, size(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(concat(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::sum, size(concat(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::sum, sum(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, sum(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
::sum == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::sum & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::sum)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::sum)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::sum)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::sum == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::sum | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::sum)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::sum)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::sum, max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::sum & sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_sample, ::v_sample, ::Vref)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_sample, ::v_sample, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vref, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vref, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vref, orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::mode_in, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::mode_in, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vtol, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, ::Vtol, orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, orig(::control), orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vref, orig(::v_sample), orig(::v_sample))
::samples_length == (::samples_length | size(::samples[]))
::samples_length == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(concat(::samples[],orig(::samples[]))))
::samples_length == (::samples_length & size(concat(::samples[],orig(::samples[])))-1)
::samples_length == (::samples_length & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(concat(::samples[],orig(::samples[])))-1)
::samples_length == (::samples_length | min(::samples[orig(::sum)..::samples_length-1]))
::samples_length == (::samples_length | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples_length, ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples_length, ::samples_length))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, max(::samples[orig(::sum)..::samples_length-1]))
::samples_length == (::samples_length | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples_length == (::samples_length | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, ::samples_length))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, orig(::sum), orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length * orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples_length, orig(::sum)))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) / ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> ::samples_length)
orig(::sum) == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples_length * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) / ::samples_length)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples_length)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, orig(::sum), min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) % ::samples_length)
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, orig(::sum), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> ::samples_length)
::samples_length == (size(::samples[]) | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(concat(::samples[],orig(::samples[]))))
::samples_length == (size(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
size(::samples[]) == (::samples_length & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
::samples_length == (size(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples_length, size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(::samples[]), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >>> ::samples_length)
size(::samples[]) == (::samples_length | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
::samples_length == (size(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[]) == (::samples_length | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(concat(::samples[],orig(::samples[]))))
::samples_length == (size(::samples[])-1 ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (::samples_length ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(concat(::samples[],orig(::samples[])))-1 % ::samples_length)
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length ^ size(::samples[])-1)
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length | size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
::samples[] == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples_length * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples_length, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % ::samples_length)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
::samples[] == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples_length * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples_length, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % ::samples_length)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples[], ::samples_length))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
::samples[] == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples_length * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples_length, ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % ::samples_length)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[]), min(::samples[]))
min(::samples[]) == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples_length * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) / ::samples_length)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples_length)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples_length, min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) / ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) % ::samples_length)
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[]), max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[]), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(::samples[]), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(intersection(::samples[],orig(::samples[]))), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples_length, size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples_length, size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(concat(::samples[],orig(::samples[]))), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) % ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples_length & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples_length)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::mode_in, ::mode_in)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::mode_in, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::mode_in, orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, ::Vtol, ::Vtol)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_in, orig(::control), orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vtol, ::Vtol, orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vtol, orig(::control), orig(::control))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vtol, orig(::v_sample), orig(::v_sample))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(orig(::sum), orig(::sum)))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
orig(::sum) == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (orig(::sum) | sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (orig(::sum) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), orig(::sum), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) / size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> size(::samples[]))
orig(::sum) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
orig(::sum) == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) % size(::samples[]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), size(::samples[])-1))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) % size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) / size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> size(::samples[])-1)
orig(::sum) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])-1))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[])-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[])-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
orig(::sum) == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(::samples[])-1 * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
orig(::sum) == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
::samples[] == (orig(::sum) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) && ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) || ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(orig(::sum), ::samples[]))
orig(::sum) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
orig(::sum) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
::samples[] == (orig(::sum) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) && ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) || ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(orig(::sum), ::samples[]))
orig(::sum) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
orig(::sum) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> ::samples[])
orig(::sum) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
::samples[] == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(orig(::sum), ::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), ::samples[]))
orig(::sum) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
::samples[] == (orig(::sum) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) && ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) || ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(orig(::sum), ::samples[]))
orig(::sum) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
orig(::sum) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
min(::samples[]) == (orig(::sum) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) << min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) >> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) ^ min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (plume.MathMDE.gcd(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) && min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) || min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[])))
orig(::sum) == (min(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
orig(::sum) == (plume.MathMDE.gcd(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.min(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.min(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), max(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> max(::samples[]))
orig(::sum) == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
max(::samples[]) == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(orig(::sum), max(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), max(::samples[])))
orig(::sum) == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), sum(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> sum(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
orig(::sum) == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(orig(::sum), sum(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), sum(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> orig(::sum))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
orig(::sum) == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
sum(::samples[]) == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), size(intersection(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) / size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> size(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(intersection(::samples[],orig(::samples[])))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) / size(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) % size(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), size(intersection(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) && size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> size(intersection(::samples[],orig(::samples[])))-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[])))-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
orig(::sum) == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(intersection(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), sum(intersection(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> sum(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(orig(::sum), sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> orig(::sum))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
orig(::sum) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(intersection(::samples[],orig(::samples[]))) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
sum(intersection(::samples[],orig(::samples[]))) == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) % size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) / size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> size(concat(::samples[],orig(::samples[]))))
orig(::sum) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
orig(::sum) == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(orig(::sum), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) % size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) / size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> size(concat(::samples[],orig(::samples[])))-1)
orig(::sum) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[])))-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[])))-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
orig(::sum) == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (size(concat(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * sum(concat(::samples[],orig(::samples[]))))
orig(::sum) == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) && min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) * min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) || min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) * max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> orig(::sum))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> orig(::sum))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) && sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (min(::samples[orig(::sum)..::samples_length-1]) || sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
orig(::sum) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) && min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) || min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.gcd(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.logicalXor(orig(::sum), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> orig(::sum))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (orig(::sum) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) ^ max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (java.lang.Math.min(max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (max(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::sum) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
orig(::sum) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.min(orig(::sum), max(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) * max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) << max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::sum), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::sum) & sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(concat(::samples[],orig(::samples[]))))
size(::samples[]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
size(::samples[]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(::samples[]), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(::samples[]), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >>> size(::samples[]))
size(::samples[]) == (size(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
size(::samples[]) == (size(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
size(::samples[]) == (size(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[]) == (size(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(concat(::samples[],orig(::samples[]))))
size(::samples[]) == (size(::samples[])-1 ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[]) ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(concat(::samples[],orig(::samples[])))-1 % size(::samples[]))
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) ^ size(::samples[])-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) | size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
::samples[] == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[]), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % size(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
::samples[] == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[]), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % size(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples[], size(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
::samples[] == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[]), ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % size(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[]), min(::samples[]))
min(::samples[]) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
min(::samples[]) == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[]), min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) / size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) * min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) % size(::samples[]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[]), max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[]), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(::samples[]), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(intersection(::samples[],orig(::samples[]))), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(::samples[]), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(::samples[]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(concat(::samples[],orig(::samples[]))), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) % size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[]))))
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))))
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(concat(::samples[],orig(::samples[]))))
size(::samples[])-1 == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >>> size(::samples[])-1)
size(::samples[])-1 == (size(::samples[])-1 | min(::samples[orig(::sum)..::samples_length-1]))
size(::samples[])-1 == (size(::samples[])-1 | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]))
size(::samples[])-1 == (size(::samples[])-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[])-1 == (size(::samples[])-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])-1))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
::samples[] == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(::samples[])-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[])-1, ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
::samples[] == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])-1))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
::samples[] == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(::samples[])-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[])-1, ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
::samples[] == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])-1))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
::samples[] == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(::samples[])-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[])-1, ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 * ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
::samples[] == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[]), min(::samples[]))
min(::samples[]) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(::samples[])-1))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) / size(::samples[])-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << size(::samples[])-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
min(::samples[]) == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(::samples[])-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(size(::samples[])-1, min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) % size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) / size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 * min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
min(::samples[]) == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[]), max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(::samples[])-1)
size(intersection(::samples[],orig(::samples[]))) == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[]))) == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(::samples[])-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(::samples[])-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(concat(::samples[],orig(::samples[]))), size(::samples[])-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(::samples[])-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[])-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] || ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::samples[], ::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] || ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
::samples[] == (min(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
::samples[] == (plume.MathMDE.gcd(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] || min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
::samples[] == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
max(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
::samples[] == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
::samples[] == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> ::samples[])
sum(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(intersection(::samples[],orig(::samples[])))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(intersection(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % size(intersection(::samples[],orig(::samples[]))))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(intersection(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
::samples[] == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(concat(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(concat(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) && sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) || sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::samples[], ::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] || ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], ::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
::samples[] == (min(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
::samples[] == (plume.MathMDE.gcd(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] || min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
::samples[] == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
max(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
::samples[] == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
::samples[] == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> ::samples[])
sum(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(intersection(::samples[],orig(::samples[])))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(intersection(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % size(intersection(::samples[],orig(::samples[]))))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(intersection(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
::samples[] == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(concat(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(concat(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) && sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) || sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.max(::samples[], ::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
min(::samples[]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
::samples[] == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[])))
min(::samples[]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
::samples[] == (java.lang.Math.max(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (max(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (java.lang.Math.max(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(max(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> ::samples[])
::samples[] == (java.lang.Math.max(sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.gcd(sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (sum(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> ::samples[])
sum(::samples[]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (java.lang.Math.max(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (sum(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(::samples[])))
sum(::samples[]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples[])
::samples[] == (java.lang.Math.max(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.max(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(intersection(::samples[],orig(::samples[])))))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples[], size(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(::samples[], size(concat(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], ::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
::samples[] == (plume.MathMDE.gcd(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] ^ min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] || min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[])))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
::samples[] == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
::samples[] == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
max(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
::samples[] == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
::samples[] == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> ::samples[])
sum(::samples[]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(::samples[]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(intersection(::samples[],orig(::samples[])))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(intersection(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) % size(intersection(::samples[],orig(::samples[]))))
::samples[] == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(intersection(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> sum(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(intersection(::samples[],orig(::samples[]))) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
::samples[] == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
::samples[] == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (size(concat(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] % size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] / size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(::samples[], size(concat(::samples[],orig(::samples[])))-1))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * sum(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) && min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) || min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) && sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (min(::samples[orig(::sum)..::samples_length-1]) || sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) << min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] && min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] || min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.gcd(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.logicalXor(::samples[], min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (::samples[] | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> ::samples[])
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (java.lang.Math.min(max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (max(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) << max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
::samples[] == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] * max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] << max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.min(::samples[], max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
min(::samples[]) == (min(::samples[]) | min(::samples[]))
min(::samples[]) == (min(::samples[]) | min(::samples[]))
min(::samples[]) == (min(::samples[]) | min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
min(::samples[]) == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (min(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
max(::samples[]) == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) ^ max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | max(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(min(::samples[]), max(::samples[])))
min(::samples[]) == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> max(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
min(::samples[]) == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) ^ sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(min(::samples[]), sum(::samples[])))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> min(::samples[]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
min(::samples[]) == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
sum(::samples[]) == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(intersection(::samples[],orig(::samples[])))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) / size(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(min(::samples[]), size(intersection(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) / size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(min(::samples[]), size(intersection(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) && size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> sum(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) ^ sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(min(::samples[]), sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> min(::samples[]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
sum(intersection(::samples[],orig(::samples[]))) == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[]) == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(min(::samples[]), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) % size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) / size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[]) == (java.lang.Math.pow(min(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (size(concat(::samples[],orig(::samples[])))-1 * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.min(min(::samples[]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) % size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) / size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(concat(::samples[],orig(::samples[]))) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * sum(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) * min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) || min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1])))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) || sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (plume.MathMDE.logicalXor(min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
min(::samples[]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) && min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) || min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.gcd(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (plume.MathMDE.logicalXor(min(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) << min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> min(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) ^ max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) ^ max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (java.lang.Math.min(max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1])))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) * sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.min(min(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) * max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) << max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[]))
max(::samples[]) == (max(::samples[]) | max(::samples[]))
max(::samples[]) == (max(::samples[]) | max(::samples[]))
max(::samples[]) == (max(::samples[]) | max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
max(::samples[]) == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[]) == (max(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[]) == (java.lang.Math.max(sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (plume.MathMDE.gcd(sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (sum(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) ^ sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> max(::samples[]))
sum(::samples[]) == (java.lang.Math.max(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[]) == (max(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (plume.MathMDE.gcd(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (sum(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | sum(::samples[]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(max(::samples[]), sum(::samples[])))
sum(::samples[]) == (max(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (plume.MathMDE.gcd(max(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) * size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[]))
max(::samples[]) == (java.lang.Math.max(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) << min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) >> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) >>> min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) ^ min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) ^ sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[]))
sum(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.max(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(max(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(max(::samples[]), sum(intersection(::samples[],orig(::samples[])))))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(max(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[]), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(max(::samples[]), sum(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[]) == (plume.MathMDE.gcd(sum(::samples[]), sum(concat(::samples[],orig(::samples[])))))
sum(::samples[]) == (plume.MathMDE.gcd(sum(::samples[]), sum(concat(::samples[],orig(::samples[])))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> sum(::samples[]))
sum(::samples[]) == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) | sum(::samples[]))
sum(::samples[]) == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[]) == (sum(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) & size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) & size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) * size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[]) == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) ^ sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> sum(::samples[]))
sum(::samples[]) == (java.lang.Math.max(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[]) == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) << min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) >> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.max(sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1])))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) << min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) >> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) >>> min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) ^ min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(sum(::samples[]), sum(intersection(::samples[],orig(::samples[])))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) & sum(intersection(::samples[],orig(::samples[]))))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) | sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[]) == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1])))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) & max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(::samples[]), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(sum(::samples[]), sum(concat(::samples[],orig(::samples[])))))
sum(::samples[]) == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> sum(::samples[]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) | max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[]) == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) % size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) % size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[]))) | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[]))) | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) % size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) / size(intersection(::samples[],orig(::samples[]))))
sum(concat(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) * max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.logicalXor(size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[])))-1 == (plume.MathMDE.logicalXor(size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1])))
size(intersection(::samples[],orig(::samples[])))-1 == (plume.MathMDE.logicalXor(size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1])))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 || min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 || min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (plume.MathMDE.gcd(size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1])))
size(intersection(::samples[],orig(::samples[])))-1 == (plume.MathMDE.gcd(size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> sum(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 * sum(intersection(::samples[],orig(::samples[]))))
sum(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (max(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (max(::samples[orig(::sum)..::samples_length-1]) / size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[])))-1)
max(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(concat(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) << size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 && sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 && min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (size(intersection(::samples[],orig(::samples[])))-1 * max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> sum(intersection(::samples[],orig(::samples[]))))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) | sum(intersection(::samples[],orig(::samples[]))))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> sum(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(sum(intersection(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[])))))
sum(intersection(::samples[],orig(::samples[]))) == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) << sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) << sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) | max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (sum(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(intersection(::samples[],orig(::samples[]))) == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
size(concat(::samples[],orig(::samples[]))) == (size(concat(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
size(concat(::samples[],orig(::samples[]))) == (size(concat(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
size(concat(::samples[],orig(::samples[]))) == (size(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[]))) == (size(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) % size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(concat(::samples[],orig(::samples[])))-1 | min(::samples[orig(::sum)..::samples_length-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(concat(::samples[],orig(::samples[])))-1 | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(concat(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(concat(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(sum(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 & sum(concat(::samples[],orig(::samples[]))))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (size(concat(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[])))-1)
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(max(::samples[orig(::sum)..::samples_length-1]), size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(concat(::samples[],orig(::samples[]))) == (sum(concat(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
sum(concat(::samples[],orig(::samples[]))) == (sum(concat(::samples[],orig(::samples[]))) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]))
sum(concat(::samples[],orig(::samples[]))) == (sum(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(concat(::samples[],orig(::samples[]))) == (sum(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) & min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
max(::samples[orig(::sum)..::samples_length-1]) == (plume.MathMDE.gcd(sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | min(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[orig(::sum)..::samples_length-1]), min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) & max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[orig(::sum)..::samples_length-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) | max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[orig(::sum)..::samples_length-1]) == (max(::samples[orig(::sum)..::samples_length-1]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[orig(::sum)..::samples_length-1]), max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[orig(::sum)..::samples_length-1]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[orig(::sum)..::samples_length-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[orig(::sum)..::samples_length-1]), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
===========================================================================
..DC-to-DC_Converter_Plant:::ENTER
::time == ::time
::i_out == ::i_out
::v_out == ::v_out
::D_out == ::D_out
::D_out == ::D
::mode_out == ::mode_out
::Vs_out == ::Vs_out
::Vs == ::Vs
::T == ::T
::i0 == ::i0
::v0 == ::v0
::control == ::control
::time != 0
::time <= 0.0083333
::time >= 0
::time >= 1.6667E-5
::i_out != 0
::i_out <= 13.2714
::i_out >= -5.0501E-13
::v_out != 0
::v_out <= 49.1003
::v_out >= 0
::v_out >= 45.9747
::D_out == 0.6072
::D_out != 0
::D_out <= 0.6072
::D_out >= 0
::D_out >= 0.6072
::mode_out one of { 1.0, 2.0, 3.0 }
::mode_out != 0
::mode_out <= 3.0
::mode_out >= 0
::mode_out >= 1.0
::Vs_out != 0
::Vs_out <= 104.5118
::Vs_out >= 0
::Vs_out >= 64
::Vs_out >= 97.3024
::Vs != 0
::Vs <= 106.5691
::Vs >= 0
::Vs >= 64
::Vs >= 97.3024
::T == 1.6667E-5
::T != 0
::T <= 1.6667E-5
::T >= 0
::T >= 1.6667E-5
::i0 == 4.5
::i0 != 0
::i0 <= 4.5
::i0 >= 0
::i0 >= 4.5
::v0 == 48.0
::v0 != 0
::v0 <= 48.0
::v0 >= 0
::v0 >= 48.0
::control one of { 1.0, 2.0, 3.0 }
::control != 0
::control <= 3.0
::control >= 0
::control >= 1.0
::time - ::time == 0
::time != ::i_out
::time < ::v_out
::time < ::D_out
::time < ::mode_out
::time < ::Vs_out
::time < ::Vs
::T % ::time == 0
::time % ::T == 0
::time >= ::T
::time < ::i0
::time < ::v0
::time < ::control
::i_out - ::i_out == 0
::i_out < ::v_out
::i_out != ::D_out
::i_out != ::mode_out
::i_out < ::Vs_out
::i_out < ::Vs
::T % ::i_out == 0
::i_out != ::T
::i_out % ::T == 0
::i_out < ::v0
::i_out != ::control
::v_out - ::v_out == 0
::v_out > ::D_out
::v_out > ::mode_out
::v_out < ::Vs_out
::v_out < ::Vs
::T % ::v_out == 0
::v_out % ::T == 0
::v_out > ::T
::v_out > ::i0
::v_out > ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::D_out + 0 == 0
::D_out < ::mode_out
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::mode_out + 0 == 0
::D_out < ::Vs_out
::D_out < ::Vs
::D_out % ::T == 0
::D_out > ::T
::T % ::D_out == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::T + 0 == 0
::D_out < ::i0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::i0 + 0 == 0
::D_out < ::v0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::v0 + 0 == 0
::D_out < ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::control + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::mode_out + 0 == 0
::mode_out < ::Vs_out
::mode_out < ::Vs
::T % ::mode_out == 0
::mode_out % ::T == 0
::mode_out > ::T
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::T + 0 == 0
::mode_out < ::i0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::i0 + 0 == 0
::mode_out < ::v0
::v0 % ::mode_out == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::v0 + 0 == 0
::mode_out >= ::control
::Vs_out - ::Vs_out == 0
::T % ::Vs_out == 0
::Vs_out % ::T == 0
::Vs_out > ::T
::Vs_out > ::i0
::Vs_out > ::v0
::Vs_out > ::control
::Vs - ::Vs == 0
::T % ::Vs == 0
::Vs % ::T == 0
::Vs > ::T
::Vs > ::i0
::Vs > ::v0
::Vs > ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::T + 0 == 0
::T % ::i0 == 0
::T < ::i0
::i0 % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::i0 + 0 == 0
::T % ::v0 == 0
::T < ::v0
::v0 % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::v0 + 0 == 0
::T % ::control == 0
::T < ::control
::control % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::control + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * ::i0 + 0 == 0
::i0 < ::v0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * ::v0 + 0 == 0
::i0 > ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * ::control + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::v0+ 0 * ::v0 + 0 == 0
::v0 % ::control == 0
::v0 > ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::v0+ 0 * ::control + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::control + 0 == 0
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vs_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vs)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::mode_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::mode_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::Vs_out, ::Vs_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::Vs, ::Vs)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::T, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::T, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::T, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::i0, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::v0)
::T == (java.lang.Math.pow(::T, ::Vs_out))
::T == (java.lang.Math.pow(::T, ::Vs_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs, ::Vs, ::Vs)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs, ::Vs, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs, ::Vs, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs, ::Vs, ::v0)
::T == (java.lang.Math.pow(::T, ::Vs))
::T == (java.lang.Math.pow(::T, ::Vs))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::i0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, ::control, ::control)
===========================================================================
..DC-to-DC_Converter_Plant:::EXIT
::time == ::time
::time == orig(::time)
::i_out == ::i_out
::v_out == ::v_out
::v_out == orig(::v_out)
::D_out == ::D_out
::D_out == ::D
::D_out == orig(::D_out)
::D_out == orig(::D)
::mode_out == ::mode_out
::Vs_out == ::Vs_out
::Vs_out == ::Vs
::Vs_out == orig(::Vs)
::T == ::T
::T == orig(::T)
::i0 == ::i0
::i0 == orig(::i0)
::v0 == ::v0
::v0 == orig(::v0)
::control == ::control
::control == orig(::control)
orig(::i_out) == orig(::i_out)
orig(::mode_out) == orig(::mode_out)
orig(::Vs_out) == orig(::Vs_out)
::time != 0
::time <= 0.0083333
::time >= 0
::time >= 1.6667E-5
::i_out != 0
::i_out <= 13.2714
::i_out >= -5.0501E-13
::v_out != 0
::v_out <= 49.1003
::v_out >= 0
::v_out >= 45.9747
::D_out == 0.6072
::D_out != 0
::D_out <= 0.6072
::D_out >= 0
::D_out >= 0.6072
::mode_out one of { 1.0, 2.0, 3.0 }
::mode_out != 0
::mode_out <= 3.0
::mode_out >= 0
::mode_out >= 1.0
::Vs_out != 0
::Vs_out <= 106.5691
::Vs_out >= 0
::Vs_out >= 64
::Vs_out >= 97.3024
::T == 1.6667E-5
::T != 0
::T <= 1.6667E-5
::T >= 0
::T >= 1.6667E-5
::i0 == 4.5
::i0 != 0
::i0 <= 4.5
::i0 >= 0
::i0 >= 4.5
::v0 == 48.0
::v0 != 0
::v0 <= 48.0
::v0 >= 0
::v0 >= 48.0
::control one of { 1.0, 2.0, 3.0 }
::control != 0
::control <= 3.0
::control >= 0
::control >= 1.0
orig(::i_out) != 0
orig(::i_out) <= 13.2714
orig(::i_out) >= -5.0501E-13
orig(::mode_out) one of { 1.0, 2.0, 3.0 }
orig(::mode_out) != 0
orig(::mode_out) <= 3.0
orig(::mode_out) >= 0
orig(::mode_out) >= 1.0
orig(::Vs_out) != 0
orig(::Vs_out) <= 104.5118
orig(::Vs_out) >= 0
orig(::Vs_out) >= 64
orig(::Vs_out) >= 97.3024
::time - ::time == 0
::time != ::i_out
::time < ::v_out
::time < ::D_out
::time < ::mode_out
::time < ::Vs_out
::T % ::time == 0
::time % ::T == 0
::time >= ::T
::time < ::i0
::time < ::v0
::time < ::control
::time != orig(::i_out)
::time < orig(::mode_out)
::time < orig(::Vs_out)
::i_out - ::i_out == 0
::i_out < ::v_out
::i_out != ::D_out
::i_out != ::mode_out
::i_out < ::Vs_out
::T % ::i_out == 0
::i_out != ::T
::i_out % ::T == 0
::i_out < ::v0
::i_out != ::control
::i_out % orig(::i_out) == 0
::i_out <= orig(::i_out)
orig(::i_out) % ::i_out == 0
::i_out != orig(::mode_out)
::i_out < orig(::Vs_out)
::v_out - ::v_out == 0
::v_out > ::D_out
::v_out > ::mode_out
::v_out < ::Vs_out
::T % ::v_out == 0
::v_out % ::T == 0
::v_out > ::T
::v_out > ::i0
::v_out > ::control
::v_out > orig(::i_out)
::v_out > orig(::mode_out)
::v_out < orig(::Vs_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::D_out + 0 == 0
::D_out < ::mode_out
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::mode_out + 0 == 0
::D_out < ::Vs_out
::D_out % ::T == 0
::D_out > ::T
::T % ::D_out == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::T + 0 == 0
::D_out < ::i0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::i0 + 0 == 0
::D_out < ::v0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::v0 + 0 == 0
::D_out < ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * ::control + 0 == 0
::D_out != orig(::i_out)
::D_out < orig(::mode_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::D_out+ 0 * orig(::mode_out) + 0 == 0
::D_out < orig(::Vs_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::mode_out + 0 == 0
::mode_out < ::Vs_out
::T % ::mode_out == 0
::mode_out % ::T == 0
::mode_out > ::T
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::T + 0 == 0
::mode_out < ::i0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::i0 + 0 == 0
::mode_out < ::v0
::v0 % ::mode_out == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::mode_out+ 0 * ::v0 + 0 == 0
::mode_out % ::control == 0
::mode_out >= ::control
::mode_out != orig(::i_out)
::mode_out < orig(::Vs_out)
::Vs_out - ::Vs_out == 0
::T % ::Vs_out == 0
::Vs_out % ::T == 0
::Vs_out > ::T
::Vs_out > ::i0
::Vs_out > ::v0
::Vs_out > ::control
::Vs_out > orig(::i_out)
::Vs_out > orig(::mode_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::T + 0 == 0
::T % ::i0 == 0
::T < ::i0
::i0 % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::i0 + 0 == 0
::T % ::v0 == 0
::T < ::v0
::v0 % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::v0 + 0 == 0
::T % ::control == 0
::T < ::control
::control % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * ::control + 0 == 0
::T != orig(::i_out)
::T % orig(::i_out) == 0
orig(::i_out) % ::T == 0
::T % orig(::mode_out) == 0
::T < orig(::mode_out)
orig(::mode_out) % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::T+ 0 * orig(::mode_out) + 0 == 0
::T % orig(::Vs_out) == 0
::T < orig(::Vs_out)
orig(::Vs_out) % ::T == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * ::i0 + 0 == 0
::i0 < ::v0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * ::v0 + 0 == 0
::i0 > ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * ::control + 0 == 0
::i0 > orig(::mode_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::i0+ 0 * orig(::mode_out) + 0 == 0
::i0 < orig(::Vs_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::v0+ 0 * ::v0 + 0 == 0
::v0 % ::control == 0
::v0 > ::control
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::v0+ 0 * ::control + 0 == 0
::v0 > orig(::i_out)
::v0 % orig(::mode_out) == 0
::v0 > orig(::mode_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::v0+ 0 * orig(::mode_out) + 0 == 0
::v0 < orig(::Vs_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * ::control+ 0 * ::control + 0 == 0
::control != orig(::i_out)
::control <= orig(::mode_out)
::control < orig(::Vs_out)
orig(::i_out) - orig(::i_out) == 0
orig(::i_out) != orig(::mode_out)
orig(::i_out) < orig(::Vs_out)
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinaryFloat invariant: 0 * orig(::mode_out)+ 0 * orig(::mode_out) + 0 == 0
orig(::mode_out) < orig(::Vs_out)
orig(::Vs_out) - orig(::Vs_out) == 0
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::Vs_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, orig(::Vs_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i_out, ::i_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v_out, ::v_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::D_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::mode_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::D_out, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::mode_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::mode_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::Vs_out, ::Vs_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::T, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::i0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::v0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, orig(::i_out), orig(::i_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, orig(::mode_out), orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::D_out, orig(::Vs_out), orig(::Vs_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::mode_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::mode_out, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::T, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::T, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::T, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::i0, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::mode_out, ::control, ::control)
::control == (java.lang.Math.min(::mode_out, orig(::mode_out)))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::Vs_out)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::T)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::Vs_out, ::Vs_out, ::v0)
::T == (java.lang.Math.pow(::T, ::Vs_out))
::T == (java.lang.Math.pow(::T, ::Vs_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::T, orig(::mode_out))
::T == (java.lang.Math.pow(::T, orig(::Vs_out)))
::T == (java.lang.Math.pow(::T, orig(::Vs_out)))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, ::i0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::i0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::v0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, orig(::i_out), orig(::i_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, orig(::mode_out), orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::T, orig(::Vs_out), orig(::Vs_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::i0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::i0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::i0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::v0, ::v0)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::v0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, orig(::i_out), orig(::i_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, orig(::mode_out), orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::i0, orig(::Vs_out), orig(::Vs_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, ::v0, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, ::v0, orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, ::control, ::control)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, orig(::i_out), orig(::i_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, orig(::mode_out), orig(::mode_out))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::v0, orig(::Vs_out), orig(::Vs_out))
===========================================================================
..Sensor:::ENTER
::time == ::time
::samples_length == ::samples_length
::samples_length == size(::samples[])
::x_in1 == ::x_in1
size(::samples[]) == size(::samples[])
size(::samples[])-1 == size(::samples[])-1
::samples[] == ::samples[]
::samples[] == ::samples[]
::samples[] == ::samples[::samples_length-1]
::samples[] == ::samples[]
::samples[] == ::samples[]
min(::samples[]) == min(::samples[])
max(::samples[]) == max(::samples[])
sum(::samples[]) == sum(::samples[])
::time != 0
::time <= 0.0083333
::time >= 0
::time >= 1.6667E-5
0 <= ::samples[] <= 63 (elementwise)
::samples[] >= 0 (elementwise)
::samples[] elements <= 49
::samples[] elements >= 0
::samples_length == 16
0 <= ::samples_length <= 63
::samples_length != 0
::samples_length <= 16
::samples_length == 0  (mod 0)
::samples_length >= 0
::samples_length >= 16
::samples_length is a power of 2
::x_in1 != 0
::x_in1 <= 49.0
::x_in1 >= 0
::x_in1 >= 46.0
size(::samples[]) == 16
0 <= size(::samples[]) <= 63
size(::samples[]) != 0
size(::samples[]) <= 16
size(::samples[]) == 0  (mod 0)
size(::samples[]) >= 0
size(::samples[]) >= 16
size(::samples[]) is a power of 2
size(::samples[])-1 == 15
0 <= size(::samples[])-1 <= 63
size(::samples[])-1 != 0
size(::samples[])-1 <= 15
size(::samples[])-1 == 0  (mod 0)
size(::samples[])-1 >= 0
size(::samples[])-1 >= 15
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= min(::samples[]) <= 63
min(::samples[]) <= 49
min(::samples[]) >= 0
min(::samples[]) >= 0
0 <= max(::samples[]) <= 63
max(::samples[]) <= 49
max(::samples[]) >= 0
max(::samples[]) >= 0
sum(::samples[]) <= 784
sum(::samples[]) >= 0
sum(::samples[]) >= 0
::time - ::time == 0
::time < ::x_in1
::samples[] - ::samples[] == 0
::samples[] == ::samples[] (elementwise)
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] elements <= sum(::samples[])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * ::samples_length + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[]) + 0 == 0
::samples_length > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[])-1 + 0 == 0
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != min(::samples[])
::samples_length != max(::samples[])
::samples_length != sum(::samples[])
::x_in1 - ::x_in1 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[]) + 0 == 0
size(::samples[]) > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != min(::samples[])
size(::samples[]) != max(::samples[])
size(::samples[]) != sum(::samples[])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != min(::samples[])
size(::samples[])-1 != max(::samples[])
size(::samples[])-1 != sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
min(::samples[]) - min(::samples[]) == 0
min(::samples[]) <= max(::samples[])
min(::samples[]) <= sum(::samples[])
max(::samples[]) - max(::samples[]) == 0
max(::samples[]) <= sum(::samples[])
sum(::samples[]) - sum(::samples[]) == 0
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::x_in1)
::samples_length == (::samples_length | size(::samples[]))
::samples_length == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[])-1)
::samples_length == (size(::samples[]) | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), sum(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[]), min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[]), max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), sum(::samples[]))
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
===========================================================================
..Sensor:::EXIT
::time == ::time
::time == orig(::time)
::samples[] < concat(::samples[],orig(::samples[])) (lexically)
::samples[] <= concat(::samples[],orig(::samples[])) (lexically)
::samples[] > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[] >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples_length == ::samples_length
::samples_length == orig(::samples_length)
::samples_length == size(::samples[])
::x_in1 == ::x_in1
::x_in1 == orig(::x_in1)
orig(::samples[]) > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
orig(::samples[]) >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
size(::samples[]) == size(::samples[])
size(::samples[]) == orig(size(::samples[]))
size(::samples[])-1 == size(::samples[])-1
size(::samples[])-1 == orig(size(::samples[]))-1
::samples[] == ::samples[]
::samples[] == ::samples[]
::samples[] == orig(::samples[])
::samples[] == ::samples[::samples_length-1]
::samples[] == ::samples[orig(::samples_length)-1]
::samples[] == ::samples[]
::samples[] == ::samples[]
::samples[] == orig(::samples[])
min(::samples[]) == min(::samples[])
max(::samples[]) == max(::samples[])
sum(::samples[]) == sum(::samples[])
orig(::samples[]) == orig(::samples[])
orig(::samples[]) == orig(::samples[post(::samples_length)-1])
orig(::samples[]) == orig(::samples[::samples_length-1])
orig(::samples[]) == orig(::samples[])
min(orig(::samples[])) == min(orig(::samples[]))
max(orig(::samples[])) == max(orig(::samples[]))
sum(orig(::samples[])) == sum(orig(::samples[]))
intersection(::samples[],orig(::samples[])) > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
intersection(::samples[],orig(::samples[])) >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
concat(::samples[],orig(::samples[])) > ::samples[::samples_length..orig(::samples_length)-1] (lexically)
concat(::samples[],orig(::samples[])) >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[::samples_length..orig(::samples_length)-1] <= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[::samples_length..orig(::samples_length)-1]
::samples[::samples_length..orig(::samples_length)-1] >= ::samples[::samples_length..orig(::samples_length)-1] (lexically)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[orig(::samples_length)..::samples_length-1]
size(intersection(::samples[],orig(::samples[]))) == size(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 == size(intersection(::samples[],orig(::samples[])))-1
min(intersection(::samples[],orig(::samples[]))) == min(intersection(::samples[],orig(::samples[])))
max(intersection(::samples[],orig(::samples[]))) == max(intersection(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) == sum(intersection(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) == size(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[])))-1 == size(concat(::samples[],orig(::samples[])))-1
min(concat(::samples[],orig(::samples[]))) == min(concat(::samples[],orig(::samples[])))
max(concat(::samples[],orig(::samples[]))) == max(concat(::samples[],orig(::samples[])))
sum(concat(::samples[],orig(::samples[]))) == sum(concat(::samples[],orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[orig(::samples_length)..::samples_length-1])
::time != 0
::time <= 0.0083333
::time >= 0
::time >= 1.6667E-5
0 <= ::samples[] <= 63 (elementwise)
::samples[] >= 0 (elementwise)
::samples[] elements <= 49
::samples[] elements >= 0
::samples_length == 16
0 <= ::samples_length <= 63
::samples_length != 0
::samples_length <= 16
::samples_length == 0  (mod 0)
::samples_length >= 0
::samples_length >= 16
::samples_length is a power of 2
::x_in1 != 0
::x_in1 <= 49.0
::x_in1 >= 0
::x_in1 >= 46.0
0 <= orig(::samples[]) <= 63 (elementwise)
orig(::samples[]) >= 0 (elementwise)
orig(::samples[]) elements <= 49
orig(::samples[]) elements >= 0
size(::samples[]) == 16
0 <= size(::samples[]) <= 63
size(::samples[]) != 0
size(::samples[]) <= 16
size(::samples[]) == 0  (mod 0)
size(::samples[]) >= 0
size(::samples[]) >= 16
size(::samples[]) is a power of 2
size(::samples[])-1 == 15
0 <= size(::samples[])-1 <= 63
size(::samples[])-1 != 0
size(::samples[])-1 <= 15
size(::samples[])-1 == 0  (mod 0)
size(::samples[])-1 >= 0
size(::samples[])-1 >= 15
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= ::samples[] <= 63
::samples[] <= 49
::samples[] >= 0
::samples[] >= 0
0 <= min(::samples[]) <= 63
min(::samples[]) <= 49
min(::samples[]) >= 0
min(::samples[]) >= 0
0 <= max(::samples[]) <= 63
max(::samples[]) <= 49
max(::samples[]) >= 0
max(::samples[]) >= 0
sum(::samples[]) <= 784
sum(::samples[]) >= 0
sum(::samples[]) >= 0
0 <= orig(::samples[]) <= 63
orig(::samples[]) <= 49
orig(::samples[]) >= 0
orig(::samples[]) >= 0
0 <= orig(::samples[]) <= 63
orig(::samples[]) <= 49
orig(::samples[]) >= 0
orig(::samples[]) >= 0
0 <= min(orig(::samples[])) <= 63
min(orig(::samples[])) <= 49
min(orig(::samples[])) >= 0
min(orig(::samples[])) >= 0
0 <= max(orig(::samples[])) <= 63
max(orig(::samples[])) <= 49
max(orig(::samples[])) >= 0
max(orig(::samples[])) >= 0
sum(orig(::samples[])) <= 784
sum(orig(::samples[])) >= 0
sum(orig(::samples[])) >= 0
0 <= intersection(::samples[],orig(::samples[])) <= 63 (elementwise)
intersection(::samples[],orig(::samples[])) >= 0 (elementwise)
intersection(::samples[],orig(::samples[])) elements <= 49
intersection(::samples[],orig(::samples[])) elements >= 0
0 <= concat(::samples[],orig(::samples[])) <= 63 (elementwise)
concat(::samples[],orig(::samples[])) >= 0 (elementwise)
concat(::samples[],orig(::samples[])) elements <= 49
concat(::samples[],orig(::samples[])) elements >= 0
::samples[::samples_length..orig(::samples_length)-1] == []
::samples[::samples_length..orig(::samples_length)-1] elements one of {  }
0 <= ::samples[::samples_length..orig(::samples_length)-1] <= 63 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == -1 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == 1 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] >= 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] >= 64 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] elements <= -9223372036854775808
::samples[::samples_length..orig(::samples_length)-1] elements >= 9223372036854775807
::samples[::samples_length..orig(::samples_length)-1] elements are equal
::samples[::samples_length..orig(::samples_length)-1] is a power of 2 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] is boolean (elementwise)
::samples[::samples_length..orig(::samples_length)-1] sorted by <
::samples[::samples_length..orig(::samples_length)-1] sorted by <=
::samples[::samples_length..orig(::samples_length)-1] sorted by >
::samples[::samples_length..orig(::samples_length)-1] sorted by >=
size(intersection(::samples[],orig(::samples[]))) one of { 1, 2, 3 }
0 <= size(intersection(::samples[],orig(::samples[]))) <= 63
size(intersection(::samples[],orig(::samples[]))) != 0
size(intersection(::samples[],orig(::samples[]))) <= 3
size(intersection(::samples[],orig(::samples[]))) >= 0
size(intersection(::samples[],orig(::samples[]))) >= 1
size(intersection(::samples[],orig(::samples[])))-1 one of { 0, 1, 2 }
0 <= size(intersection(::samples[],orig(::samples[])))-1 <= 63
size(intersection(::samples[],orig(::samples[])))-1 <= 2
size(intersection(::samples[],orig(::samples[])))-1 >= 0
size(intersection(::samples[],orig(::samples[])))-1 >= 0
0 <= min(intersection(::samples[],orig(::samples[]))) <= 63
min(intersection(::samples[],orig(::samples[]))) <= 49
min(intersection(::samples[],orig(::samples[]))) >= 0
min(intersection(::samples[],orig(::samples[]))) >= 0
0 <= max(intersection(::samples[],orig(::samples[]))) <= 63
max(intersection(::samples[],orig(::samples[]))) <= 49
max(intersection(::samples[],orig(::samples[]))) >= 0
max(intersection(::samples[],orig(::samples[]))) >= 0
sum(intersection(::samples[],orig(::samples[]))) <= 144
sum(intersection(::samples[],orig(::samples[]))) >= 0
sum(intersection(::samples[],orig(::samples[]))) >= 0
size(concat(::samples[],orig(::samples[]))) == 32
0 <= size(concat(::samples[],orig(::samples[]))) <= 63
size(concat(::samples[],orig(::samples[]))) != 0
size(concat(::samples[],orig(::samples[]))) <= 32
size(concat(::samples[],orig(::samples[]))) == 0  (mod 0)
size(concat(::samples[],orig(::samples[]))) >= 0
size(concat(::samples[],orig(::samples[]))) >= 32
size(concat(::samples[],orig(::samples[]))) is a power of 2
size(concat(::samples[],orig(::samples[])))-1 == 31
0 <= size(concat(::samples[],orig(::samples[])))-1 <= 63
size(concat(::samples[],orig(::samples[])))-1 != 0
size(concat(::samples[],orig(::samples[])))-1 <= 31
size(concat(::samples[],orig(::samples[])))-1 == 0  (mod 0)
size(concat(::samples[],orig(::samples[])))-1 >= 0
size(concat(::samples[],orig(::samples[])))-1 >= 31
0 <= min(concat(::samples[],orig(::samples[]))) <= 63
min(concat(::samples[],orig(::samples[]))) <= 49
min(concat(::samples[],orig(::samples[]))) >= 0
min(concat(::samples[],orig(::samples[]))) >= 0
0 <= max(concat(::samples[],orig(::samples[]))) <= 63
max(concat(::samples[],orig(::samples[]))) <= 49
max(concat(::samples[],orig(::samples[]))) >= 0
max(concat(::samples[],orig(::samples[]))) >= 0
sum(concat(::samples[],orig(::samples[]))) <= 1568
sum(concat(::samples[],orig(::samples[]))) >= 0
sum(concat(::samples[],orig(::samples[]))) >= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == 0
0 <= sum(::samples[::samples_length..orig(::samples_length)-1]) <= 63
sum(::samples[::samples_length..orig(::samples_length)-1]) <= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == 0  (mod 0)
sum(::samples[::samples_length..orig(::samples_length)-1]) >= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) >= 0
sum(::samples[::samples_length..orig(::samples_length)-1]) is boolean
::time - ::time == 0
::time < ::x_in1
::samples[] - ::samples[] == 0
::samples[] == ::samples[] (elementwise)
::samples[] in ::samples[]
::samples[] in ::samples[]
::samples[] elements <= sum(::samples[])
::samples[] is a subsequence of concat(::samples[],orig(::samples[]))
min(intersection(::samples[],orig(::samples[]))) in ::samples[]
max(intersection(::samples[],orig(::samples[]))) in ::samples[]
::samples[] elements >= min(concat(::samples[],orig(::samples[])))
::samples[] elements <= max(concat(::samples[],orig(::samples[])))
::samples[] elements <= sum(concat(::samples[],orig(::samples[])))
::samples[] elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * ::samples_length + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[]) + 0 == 0
::samples_length > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(::samples[])-1 + 0 == 0
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != ::samples[]
::samples_length != min(::samples[])
::samples_length != max(::samples[])
::samples_length != sum(::samples[])
::samples_length != orig(::samples[])
::samples_length != orig(::samples[])
::samples_length != min(orig(::samples[]))
::samples_length != max(orig(::samples[]))
::samples_length != sum(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples_length
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples_length
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples_length
::samples_length > size(intersection(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
::samples_length > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
::samples_length != min(intersection(::samples[],orig(::samples[])))
::samples_length != max(intersection(::samples[],orig(::samples[])))
::samples_length != sum(intersection(::samples[],orig(::samples[])))
::samples_length < size(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) % ::samples_length == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
::samples_length < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
::samples_length != min(concat(::samples[],orig(::samples[])))
::samples_length != max(concat(::samples[],orig(::samples[])))
::samples_length != sum(concat(::samples[],orig(::samples[])))
::samples_length > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * ::samples_length+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
::x_in1 - ::x_in1 == 0
orig(::samples[]) - orig(::samples[]) == 0
orig(::samples[]) == orig(::samples[]) (elementwise)
::samples[] in orig(::samples[])
::samples[] in orig(::samples[])
orig(::samples[]) elements <= sum(::samples[])
orig(::samples[]) in orig(::samples[])
orig(::samples[]) elements <= sum(orig(::samples[]))
orig(::samples[]) is a subsequence of concat(::samples[],orig(::samples[]))
min(intersection(::samples[],orig(::samples[]))) in orig(::samples[])
max(intersection(::samples[],orig(::samples[]))) in orig(::samples[])
orig(::samples[]) elements >= min(concat(::samples[],orig(::samples[])))
orig(::samples[]) elements <= max(concat(::samples[],orig(::samples[])))
orig(::samples[]) elements <= sum(concat(::samples[],orig(::samples[])))
orig(::samples[]) elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[]) + 0 == 0
size(::samples[]) > size(::samples[])-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != ::samples[]
size(::samples[]) != min(::samples[])
size(::samples[]) != max(::samples[])
size(::samples[]) != sum(::samples[])
size(::samples[]) != orig(::samples[])
size(::samples[]) != orig(::samples[])
size(::samples[]) != min(orig(::samples[]))
size(::samples[]) != max(orig(::samples[]))
size(::samples[]) != sum(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < size(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == size(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > size(::samples[])
size(::samples[]) > size(intersection(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[]) > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[]) != min(intersection(::samples[],orig(::samples[])))
size(::samples[]) != max(intersection(::samples[],orig(::samples[])))
size(::samples[]) != sum(intersection(::samples[],orig(::samples[])))
size(::samples[]) < size(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) % size(::samples[]) == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[]) < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[]) != min(concat(::samples[],orig(::samples[])))
size(::samples[]) != max(concat(::samples[],orig(::samples[])))
size(::samples[]) != sum(concat(::samples[],orig(::samples[])))
size(::samples[]) > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(::samples[])-1 + 0 == 0
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != ::samples[]
size(::samples[])-1 != min(::samples[])
size(::samples[])-1 != max(::samples[])
size(::samples[])-1 != sum(::samples[])
size(::samples[])-1 != orig(::samples[])
size(::samples[])-1 != orig(::samples[])
size(::samples[])-1 != min(orig(::samples[]))
size(::samples[])-1 != max(orig(::samples[]))
size(::samples[])-1 != sum(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < size(::samples[])-1
::samples[::samples_length..orig(::samples_length)-1] elements == size(::samples[])-1
::samples[::samples_length..orig(::samples_length)-1] elements > size(::samples[])-1
size(::samples[])-1 > size(intersection(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[])-1 > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[])-1 != min(intersection(::samples[],orig(::samples[])))
size(::samples[])-1 != max(intersection(::samples[],orig(::samples[])))
size(::samples[])-1 != sum(intersection(::samples[],orig(::samples[])))
size(::samples[])-1 < size(concat(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(::samples[])-1 < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(::samples[])-1 != min(concat(::samples[],orig(::samples[])))
size(::samples[])-1 != max(concat(::samples[],orig(::samples[])))
size(::samples[])-1 != sum(concat(::samples[],orig(::samples[])))
size(::samples[])-1 > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(::samples[])-1+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] >= min(orig(::samples[]))
::samples[] <= sum(orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] >= min(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] >= min(concat(::samples[],orig(::samples[])))
::samples[] <= max(concat(::samples[],orig(::samples[])))
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] >= min(orig(::samples[]))
::samples[] <= max(orig(::samples[]))
::samples[] <= sum(orig(::samples[]))
::samples[] in intersection(::samples[],orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] >= min(intersection(::samples[],orig(::samples[])))
::samples[] <= max(intersection(::samples[],orig(::samples[])))
::samples[] <= sum(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] >= min(concat(::samples[],orig(::samples[])))
::samples[] <= max(concat(::samples[],orig(::samples[])))
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] >= min(orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] >= size(intersection(::samples[],orig(::samples[])))-1
::samples[] >= min(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] >= min(concat(::samples[],orig(::samples[])))
::samples[] <= max(concat(::samples[],orig(::samples[])))
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[] - ::samples[] == 0
::samples[] >= min(::samples[])
::samples[] <= max(::samples[])
::samples[] <= sum(::samples[])
::samples[] >= min(orig(::samples[]))
::samples[] <= max(orig(::samples[]))
::samples[] <= sum(orig(::samples[]))
::samples[] in intersection(::samples[],orig(::samples[]))
::samples[] in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements == ::samples[]
::samples[::samples_length..orig(::samples_length)-1] elements > ::samples[]
::samples[] != size(intersection(::samples[],orig(::samples[])))
::samples[] >= size(intersection(::samples[],orig(::samples[])))-1
::samples[] >= min(intersection(::samples[],orig(::samples[])))
::samples[] <= max(intersection(::samples[],orig(::samples[])))
::samples[] <= sum(intersection(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))
::samples[] != size(concat(::samples[],orig(::samples[])))-1
::samples[] >= min(concat(::samples[],orig(::samples[])))
::samples[] <= max(concat(::samples[],orig(::samples[])))
::samples[] <= sum(concat(::samples[],orig(::samples[])))
::samples[] >= sum(::samples[::samples_length..orig(::samples_length)-1])
min(::samples[]) - min(::samples[]) == 0
min(::samples[]) <= max(::samples[])
min(::samples[]) <= sum(::samples[])
min(::samples[]) <= max(orig(::samples[]))
min(::samples[]) <= sum(orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements >= min(::samples[])
min(::samples[]) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < min(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == min(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > min(::samples[])
min(::samples[]) != size(intersection(::samples[],orig(::samples[])))
min(::samples[]) <= min(intersection(::samples[],orig(::samples[])))
min(::samples[]) <= max(intersection(::samples[],orig(::samples[])))
min(::samples[]) <= sum(intersection(::samples[],orig(::samples[])))
min(::samples[]) != size(concat(::samples[],orig(::samples[])))
min(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
min(::samples[]) >= min(concat(::samples[],orig(::samples[])))
min(::samples[]) <= max(concat(::samples[],orig(::samples[])))
min(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
min(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
max(::samples[]) - max(::samples[]) == 0
max(::samples[]) <= sum(::samples[])
max(::samples[]) >= orig(::samples[])
max(::samples[]) >= orig(::samples[])
max(::samples[]) >= min(orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements <= max(::samples[])
max(::samples[]) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < max(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == max(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > max(::samples[])
max(::samples[]) != size(intersection(::samples[],orig(::samples[])))
max(::samples[]) >= size(intersection(::samples[],orig(::samples[])))-1
max(::samples[]) >= min(intersection(::samples[],orig(::samples[])))
max(::samples[]) >= max(intersection(::samples[],orig(::samples[])))
max(::samples[]) != size(concat(::samples[],orig(::samples[])))
max(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
max(::samples[]) >= min(concat(::samples[],orig(::samples[])))
max(::samples[]) <= max(concat(::samples[],orig(::samples[])))
max(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
max(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
sum(::samples[]) - sum(::samples[]) == 0
sum(::samples[]) >= orig(::samples[])
sum(::samples[]) >= orig(::samples[])
sum(::samples[]) >= min(orig(::samples[]))
sum(::samples[]) >= max(orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements <= sum(::samples[])
concat(::samples[],orig(::samples[])) elements <= sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements < sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == sum(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > sum(::samples[])
sum(::samples[]) != size(intersection(::samples[],orig(::samples[])))
sum(::samples[]) >= size(intersection(::samples[],orig(::samples[])))-1
sum(::samples[]) >= min(intersection(::samples[],orig(::samples[])))
sum(::samples[]) >= max(intersection(::samples[],orig(::samples[])))
sum(::samples[]) >= sum(intersection(::samples[],orig(::samples[])))
sum(::samples[]) != size(concat(::samples[],orig(::samples[])))
sum(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
sum(::samples[]) >= min(concat(::samples[],orig(::samples[])))
sum(::samples[]) >= max(concat(::samples[],orig(::samples[])))
sum(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
sum(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
orig(::samples[]) - orig(::samples[]) == 0
orig(::samples[]) >= min(orig(::samples[]))
orig(::samples[]) <= max(orig(::samples[]))
orig(::samples[]) <= sum(orig(::samples[]))
orig(::samples[]) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < orig(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == orig(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > orig(::samples[])
orig(::samples[]) != size(intersection(::samples[],orig(::samples[])))
orig(::samples[]) <= max(intersection(::samples[],orig(::samples[])))
orig(::samples[]) <= sum(intersection(::samples[],orig(::samples[])))
orig(::samples[]) != size(concat(::samples[],orig(::samples[])))
orig(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
orig(::samples[]) >= min(concat(::samples[],orig(::samples[])))
orig(::samples[]) <= max(concat(::samples[],orig(::samples[])))
orig(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
orig(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
orig(::samples[]) - orig(::samples[]) == 0
orig(::samples[]) >= min(orig(::samples[]))
orig(::samples[]) <= max(orig(::samples[]))
orig(::samples[]) <= sum(orig(::samples[]))
orig(::samples[]) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < orig(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements == orig(::samples[])
::samples[::samples_length..orig(::samples_length)-1] elements > orig(::samples[])
orig(::samples[]) != size(intersection(::samples[],orig(::samples[])))
orig(::samples[]) <= max(intersection(::samples[],orig(::samples[])))
orig(::samples[]) <= sum(intersection(::samples[],orig(::samples[])))
orig(::samples[]) != size(concat(::samples[],orig(::samples[])))
orig(::samples[]) != size(concat(::samples[],orig(::samples[])))-1
orig(::samples[]) >= min(concat(::samples[],orig(::samples[])))
orig(::samples[]) <= max(concat(::samples[],orig(::samples[])))
orig(::samples[]) <= sum(concat(::samples[],orig(::samples[])))
orig(::samples[]) >= sum(::samples[::samples_length..orig(::samples_length)-1])
min(orig(::samples[])) - min(orig(::samples[])) == 0
min(orig(::samples[])) <= max(orig(::samples[]))
min(orig(::samples[])) <= sum(orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements >= min(orig(::samples[]))
min(orig(::samples[])) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < min(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements == min(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements > min(orig(::samples[]))
min(orig(::samples[])) != size(intersection(::samples[],orig(::samples[])))
min(orig(::samples[])) <= min(intersection(::samples[],orig(::samples[])))
min(orig(::samples[])) <= max(intersection(::samples[],orig(::samples[])))
min(orig(::samples[])) <= sum(intersection(::samples[],orig(::samples[])))
min(orig(::samples[])) != size(concat(::samples[],orig(::samples[])))
min(orig(::samples[])) != size(concat(::samples[],orig(::samples[])))-1
min(orig(::samples[])) >= min(concat(::samples[],orig(::samples[])))
min(orig(::samples[])) <= max(concat(::samples[],orig(::samples[])))
min(orig(::samples[])) <= sum(concat(::samples[],orig(::samples[])))
min(orig(::samples[])) >= sum(::samples[::samples_length..orig(::samples_length)-1])
max(orig(::samples[])) - max(orig(::samples[])) == 0
max(orig(::samples[])) <= sum(orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements <= max(orig(::samples[]))
max(orig(::samples[])) in concat(::samples[],orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < max(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements == max(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements > max(orig(::samples[]))
max(orig(::samples[])) != size(intersection(::samples[],orig(::samples[])))
max(orig(::samples[])) >= size(intersection(::samples[],orig(::samples[])))-1
max(orig(::samples[])) >= min(intersection(::samples[],orig(::samples[])))
max(orig(::samples[])) >= max(intersection(::samples[],orig(::samples[])))
max(orig(::samples[])) != size(concat(::samples[],orig(::samples[])))
max(orig(::samples[])) != size(concat(::samples[],orig(::samples[])))-1
max(orig(::samples[])) >= min(concat(::samples[],orig(::samples[])))
max(orig(::samples[])) <= max(concat(::samples[],orig(::samples[])))
max(orig(::samples[])) <= sum(concat(::samples[],orig(::samples[])))
max(orig(::samples[])) >= sum(::samples[::samples_length..orig(::samples_length)-1])
sum(orig(::samples[])) - sum(orig(::samples[])) == 0
intersection(::samples[],orig(::samples[])) elements <= sum(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements < sum(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements == sum(orig(::samples[]))
::samples[::samples_length..orig(::samples_length)-1] elements > sum(orig(::samples[]))
sum(orig(::samples[])) != size(intersection(::samples[],orig(::samples[])))
sum(orig(::samples[])) >= size(intersection(::samples[],orig(::samples[])))-1
sum(orig(::samples[])) >= min(intersection(::samples[],orig(::samples[])))
sum(orig(::samples[])) >= max(intersection(::samples[],orig(::samples[])))
sum(orig(::samples[])) >= sum(intersection(::samples[],orig(::samples[])))
sum(orig(::samples[])) != size(concat(::samples[],orig(::samples[])))
sum(orig(::samples[])) != size(concat(::samples[],orig(::samples[])))-1
sum(orig(::samples[])) >= min(concat(::samples[],orig(::samples[])))
sum(orig(::samples[])) <= sum(concat(::samples[],orig(::samples[])))
sum(orig(::samples[])) >= sum(::samples[::samples_length..orig(::samples_length)-1])
intersection(::samples[],orig(::samples[])) - intersection(::samples[],orig(::samples[])) == 0
intersection(::samples[],orig(::samples[])) == intersection(::samples[],orig(::samples[])) (elementwise)
intersection(::samples[],orig(::samples[])) is a subsequence of concat(::samples[],orig(::samples[]))
intersection(::samples[],orig(::samples[])) elements <= sum(intersection(::samples[],orig(::samples[])))
intersection(::samples[],orig(::samples[])) elements >= min(concat(::samples[],orig(::samples[])))
intersection(::samples[],orig(::samples[])) elements <= max(concat(::samples[],orig(::samples[])))
intersection(::samples[],orig(::samples[])) elements <= sum(concat(::samples[],orig(::samples[])))
intersection(::samples[],orig(::samples[])) elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
concat(::samples[],orig(::samples[])) - concat(::samples[],orig(::samples[])) == 0
concat(::samples[],orig(::samples[])) == concat(::samples[],orig(::samples[])) (elementwise)
min(intersection(::samples[],orig(::samples[]))) in concat(::samples[],orig(::samples[]))
max(intersection(::samples[],orig(::samples[]))) in concat(::samples[],orig(::samples[]))
concat(::samples[],orig(::samples[])) elements <= sum(concat(::samples[],orig(::samples[])))
concat(::samples[],orig(::samples[])) elements >= sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] % ::samples[::samples_length..orig(::samples_length)-1] == 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] % ::samples[::samples_length..orig(::samples_length)-1] == 0 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[::samples_length..orig(::samples_length)-1]**2 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] == ::samples[::samples_length..orig(::samples_length)-1]**2 (elementwise)
::samples[::samples_length..orig(::samples_length)-1] is the reverse of ::samples[::samples_length..orig(::samples_length)-1]
warning: too few samples for daikon.inv.binary.twoSequence.PairwiseLinearBinary invariant: (::samples[::samples_length..orig(::samples_length)-1], ::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] elements < size(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == size(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > size(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < size(intersection(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements == size(intersection(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements > size(intersection(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements < min(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == min(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > min(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < max(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == max(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > max(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < sum(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == sum(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > sum(intersection(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < size(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == size(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > size(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < size(concat(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements == size(concat(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements > size(concat(::samples[],orig(::samples[])))-1
::samples[::samples_length..orig(::samples_length)-1] elements < min(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == min(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > min(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < max(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == max(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > max(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < sum(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements == sum(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements > sum(concat(::samples[],orig(::samples[])))
::samples[::samples_length..orig(::samples_length)-1] elements < sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] elements == sum(::samples[::samples_length..orig(::samples_length)-1])
::samples[::samples_length..orig(::samples_length)-1] elements > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(intersection(::samples[],orig(::samples[]))) + 0 == 0
size(intersection(::samples[],orig(::samples[]))) > size(intersection(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[]))) != min(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) != max(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) != sum(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) < size(concat(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(intersection(::samples[],orig(::samples[]))) < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[]))) != min(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) != max(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) != sum(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[]))) > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * size(intersection(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 <= max(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 <= sum(intersection(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 < size(concat(::samples[],orig(::samples[])))
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 < size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(intersection(::samples[],orig(::samples[])))-1 <= max(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 <= sum(concat(::samples[],orig(::samples[])))
size(intersection(::samples[],orig(::samples[])))-1 >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(intersection(::samples[],orig(::samples[])))-1+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
min(intersection(::samples[],orig(::samples[]))) - min(intersection(::samples[],orig(::samples[]))) == 0
min(intersection(::samples[],orig(::samples[]))) <= max(intersection(::samples[],orig(::samples[])))
min(intersection(::samples[],orig(::samples[]))) <= sum(intersection(::samples[],orig(::samples[])))
min(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))
min(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))-1
min(intersection(::samples[],orig(::samples[]))) >= min(concat(::samples[],orig(::samples[])))
min(intersection(::samples[],orig(::samples[]))) <= max(concat(::samples[],orig(::samples[])))
min(intersection(::samples[],orig(::samples[]))) <= sum(concat(::samples[],orig(::samples[])))
min(intersection(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
max(intersection(::samples[],orig(::samples[]))) - max(intersection(::samples[],orig(::samples[]))) == 0
max(intersection(::samples[],orig(::samples[]))) <= sum(intersection(::samples[],orig(::samples[])))
max(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))
max(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))-1
max(intersection(::samples[],orig(::samples[]))) >= min(concat(::samples[],orig(::samples[])))
max(intersection(::samples[],orig(::samples[]))) <= max(concat(::samples[],orig(::samples[])))
max(intersection(::samples[],orig(::samples[]))) <= sum(concat(::samples[],orig(::samples[])))
max(intersection(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
sum(intersection(::samples[],orig(::samples[]))) - sum(intersection(::samples[],orig(::samples[]))) == 0
sum(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) != size(concat(::samples[],orig(::samples[])))-1
sum(intersection(::samples[],orig(::samples[]))) >= min(concat(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) <= sum(concat(::samples[],orig(::samples[])))
sum(intersection(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[]))) + 0 == 0
size(concat(::samples[],orig(::samples[]))) > size(concat(::samples[],orig(::samples[])))-1
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(concat(::samples[],orig(::samples[]))) != min(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) != max(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) != sum(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[]))) > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))-1+ 0 * size(concat(::samples[],orig(::samples[])))-1 + 0 == 0
size(concat(::samples[],orig(::samples[])))-1 != min(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[])))-1 != max(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[])))-1 != sum(concat(::samples[],orig(::samples[])))
size(concat(::samples[],orig(::samples[])))-1 > sum(::samples[::samples_length..orig(::samples_length)-1])
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * size(concat(::samples[],orig(::samples[])))-1+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
min(concat(::samples[],orig(::samples[]))) - min(concat(::samples[],orig(::samples[]))) == 0
min(concat(::samples[],orig(::samples[]))) <= max(concat(::samples[],orig(::samples[])))
min(concat(::samples[],orig(::samples[]))) <= sum(concat(::samples[],orig(::samples[])))
min(concat(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
max(concat(::samples[],orig(::samples[]))) - max(concat(::samples[],orig(::samples[]))) == 0
max(concat(::samples[],orig(::samples[]))) <= sum(concat(::samples[],orig(::samples[])))
max(concat(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
sum(concat(::samples[],orig(::samples[]))) - sum(concat(::samples[],orig(::samples[]))) == 0
sum(concat(::samples[],orig(::samples[]))) >= sum(::samples[::samples_length..orig(::samples_length)-1])
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])**2
sum(::samples[::samples_length..orig(::samples_length)-1]) == sum(::samples[::samples_length..orig(::samples_length)-1])**2
warning: too few samples for daikon.inv.binary.twoScalar.LinearBinary invariant: 0 * sum(::samples[::samples_length..orig(::samples_length)-1])+ 0 * sum(::samples[::samples_length..orig(::samples_length)-1]) + 0 == 0
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernaryFloat invariant: (::time, ::time, ::x_in1)
::samples_length == (::samples_length | size(::samples[]))
::samples_length == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(concat(::samples[],orig(::samples[]))))
::samples_length == (::samples_length & size(concat(::samples[],orig(::samples[])))-1)
::samples_length == (::samples_length & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, size(concat(::samples[],orig(::samples[])))-1)
::samples_length == (::samples_length | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples_length == (::samples_length | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, ::samples_length))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples_length, sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples_length == (size(::samples[]) | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
size(::samples[]) == (::samples_length | size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(concat(::samples[],orig(::samples[]))))
::samples_length == (size(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
size(::samples[]) == (::samples_length & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
::samples_length == (size(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[]) == (::samples_length | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(concat(::samples[],orig(::samples[]))))
::samples_length == (size(::samples[])-1 ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (::samples_length ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(concat(::samples[],orig(::samples[])))-1 % ::samples_length)
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length ^ size(::samples[])-1)
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length | size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(::samples[]), min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(::samples[]), max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[]), sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, orig(::samples[]), orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, orig(::samples[]), orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(orig(::samples[])), min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(orig(::samples[])), max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(orig(::samples[])), sum(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(intersection(::samples[],orig(::samples[]))), min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(intersection(::samples[],orig(::samples[]))), max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), ::samples_length))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (::samples_length | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(::samples_length, size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, min(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, max(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples_length & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples_length)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples_length)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples_length, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(concat(::samples[],orig(::samples[]))))
size(::samples[]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
size(::samples[]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
size(::samples[]) == (size(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[]) == (size(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(concat(::samples[],orig(::samples[]))))
size(::samples[]) == (size(::samples[])-1 ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[]) ^ size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(concat(::samples[],orig(::samples[])))-1 % size(::samples[]))
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) ^ size(::samples[])-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) | size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(::samples[]), min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(::samples[]), max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[]), sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), orig(::samples[]), orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), orig(::samples[]), orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(orig(::samples[])), min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(orig(::samples[])), max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(orig(::samples[])), sum(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(intersection(::samples[],orig(::samples[]))), min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(intersection(::samples[],orig(::samples[]))), max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[]) | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(::samples[]), size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), min(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), max(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[]))))
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))))
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[])-1 | size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(concat(::samples[],orig(::samples[]))))
size(::samples[])-1 == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1)
size(::samples[])-1 == (size(::samples[])-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(::samples[])-1 == (size(::samples[])-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, ::samples[], ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(::samples[]), min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(::samples[]), max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[]), sum(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, orig(::samples[]), orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, orig(::samples[]), orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(orig(::samples[])), min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(orig(::samples[])), max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(orig(::samples[])), sum(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> size(::samples[])-1)
size(intersection(::samples[],orig(::samples[]))) == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[]))) == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 & size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(intersection(::samples[],orig(::samples[]))), min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(intersection(::samples[],orig(::samples[]))), max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(::samples[])-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(::samples[])-1 | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, min(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, max(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(::samples[])-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[])-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(::samples[])-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(::samples[])-1, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
::samples[] == (::samples[] | ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], size(concat(::samples[],orig(::samples[])))-1)
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
::samples[] == (::samples[] | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (::samples[], ::samples[], sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (::samples[] & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> ::samples[])
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
min(::samples[]) == (min(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(::samples[]) == (min(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(::samples[]), min(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> orig(::samples[]))
min(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.max(min(::samples[]), min(orig(::samples[]))))
min(concat(::samples[],orig(::samples[]))) == (java.lang.Math.min(min(::samples[]), min(orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
max(::samples[]) == (max(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(::samples[]) == (max(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(::samples[]), max(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> max(::samples[]))
max(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.min(max(::samples[]), max(orig(::samples[]))))
max(concat(::samples[],orig(::samples[]))) == (java.lang.Math.max(max(::samples[]), max(orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> max(::samples[]))
max(intersection(::samples[],orig(::samples[]))) == (java.lang.Math.min(max(::samples[]), sum(intersection(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[]) == (sum(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[]) == (sum(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(::samples[]), sum(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[]) + sum(orig(::samples[])) - sum(concat(::samples[],orig(::samples[]))) == 0
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::samples[]) == (orig(::samples[]) | orig(::samples[]))
orig(::samples[]) == (orig(::samples[]) | orig(::samples[]))
orig(::samples[]) == (orig(::samples[]) | orig(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), orig(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
orig(::samples[]) == (orig(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::samples[]) == (orig(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> orig(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> orig(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), size(concat(::samples[],orig(::samples[])))-1)
orig(::samples[]) == (orig(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
orig(::samples[]) == (orig(::samples[]) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> orig(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (orig(::samples[]), orig(::samples[]), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (orig(::samples[]) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> orig(::samples[]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> orig(::samples[]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(orig(::samples[])), min(orig(::samples[])), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(orig(::samples[])), min(orig(::samples[])), size(concat(::samples[],orig(::samples[])))-1)
min(orig(::samples[])) == (min(orig(::samples[])) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(orig(::samples[])) == (min(orig(::samples[])) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> min(orig(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(orig(::samples[])), min(orig(::samples[])), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(orig(::samples[])) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(orig(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(orig(::samples[])), max(orig(::samples[])), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(orig(::samples[])), max(orig(::samples[])), size(concat(::samples[],orig(::samples[])))-1)
max(orig(::samples[])) == (max(orig(::samples[])) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(orig(::samples[])) == (max(orig(::samples[])) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> max(orig(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(orig(::samples[])), max(orig(::samples[])), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(orig(::samples[])) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(orig(::samples[])))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(orig(::samples[])))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(orig(::samples[])), sum(orig(::samples[])), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(orig(::samples[])), sum(orig(::samples[])), size(concat(::samples[],orig(::samples[])))-1)
sum(orig(::samples[])) == (sum(orig(::samples[])) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(orig(::samples[])) == (sum(orig(::samples[])) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(orig(::samples[])), sum(orig(::samples[])), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(orig(::samples[])) & sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(intersection(::samples[],orig(::samples[]))) == (size(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[]))) | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[]))) | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(intersection(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[])))-1 == (size(intersection(::samples[],orig(::samples[])))-1 | size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(intersection(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(intersection(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(intersection(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(intersection(::samples[],orig(::samples[]))), min(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(intersection(::samples[],orig(::samples[]))), min(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
min(intersection(::samples[],orig(::samples[]))) == (min(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(intersection(::samples[],orig(::samples[]))) == (min(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> min(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(intersection(::samples[],orig(::samples[]))), min(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(intersection(::samples[],orig(::samples[]))), max(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(intersection(::samples[],orig(::samples[]))), max(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
max(intersection(::samples[],orig(::samples[]))) == (max(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(intersection(::samples[],orig(::samples[]))) == (max(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> max(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(intersection(::samples[],orig(::samples[]))), max(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(intersection(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(intersection(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(intersection(::samples[],orig(::samples[]))) == (sum(intersection(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(intersection(::samples[],orig(::samples[]))), sum(intersection(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(intersection(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1)
size(concat(::samples[],orig(::samples[]))) == (size(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[]))) == (size(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (java.lang.Math.pow(size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(concat(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
size(concat(::samples[],orig(::samples[])))-1 == (size(concat(::samples[],orig(::samples[])))-1 | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, min(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, max(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (size(concat(::samples[],orig(::samples[])))-1 & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> size(concat(::samples[],orig(::samples[])))-1)
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (size(concat(::samples[],orig(::samples[])))-1, sum(::samples[::samples_length..orig(::samples_length)-1]), sum(::samples[::samples_length..orig(::samples_length)-1]))
min(concat(::samples[],orig(::samples[]))) == (min(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
min(concat(::samples[],orig(::samples[]))) == (min(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> min(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (min(concat(::samples[],orig(::samples[]))), min(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (min(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> min(concat(::samples[],orig(::samples[]))))
max(concat(::samples[],orig(::samples[]))) == (max(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
max(concat(::samples[],orig(::samples[]))) == (max(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (max(concat(::samples[],orig(::samples[]))), max(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (max(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(concat(::samples[],orig(::samples[]))))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(::samples[::samples_length..orig(::samples_length)-1]) >>> max(concat(::samples[],orig(::samples[]))))
sum(concat(::samples[],orig(::samples[]))) == (sum(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(concat(::samples[],orig(::samples[]))) == (sum(concat(::samples[],orig(::samples[]))) | sum(::samples[::samples_length..orig(::samples_length)-1]))
warning: too few samples for daikon.inv.ternary.threeScalar.LinearTernary invariant: (sum(concat(::samples[],orig(::samples[]))), sum(concat(::samples[],orig(::samples[]))), sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
sum(::samples[::samples_length..orig(::samples_length)-1]) == (sum(concat(::samples[],orig(::samples[]))) & sum(::samples[::samples_length..orig(::samples_length)-1]))
Exiting Daikon.
